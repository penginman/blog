<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>文件上传漏洞 on </title>
    <link>/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</link>
    <description>Recent content in 文件上传漏洞 on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 19 Nov 2020 08:47:19 +0000</lastBuildDate>
    <atom:link href="/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Upload-Labs的最后几道题</title>
      <link>/posts/ctf/upload-labs5/</link>
      <pubDate>Thu, 19 Nov 2020 08:47:19 +0000</pubDate>
      <guid>/posts/ctf/upload-labs5/</guid>
      <description>Pass-17 ​&#x9;（windows环境，php版本5.2.17，题号是18题）&#xA;源码：&#xA;$is_upload = false; $msg = null; if(isset($_POST[&amp;#39;submit&amp;#39;])){ $ext_arr = array(&amp;#39;jpg&amp;#39;,&amp;#39;png&amp;#39;,&amp;#39;gif&amp;#39;); $file_name = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;]; $temp_file = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;]; $file_ext = substr($file_name,strrpos($file_name,&amp;#34;.&amp;#34;)+1); $upload_file = UPLOAD_PATH . &amp;#39;/&amp;#39; . $file_name; if(move_uploaded_file($temp_file, $upload_file)){ if(in_array($file_ext,$ext_arr)){ $img_path = UPLOAD_PATH . &amp;#39;/&amp;#39;. rand(10, 99).date(&amp;#34;YmdHis&amp;#34;).&amp;#34;.&amp;#34;.$file_ext; rename($upload_file, $img_path); $is_upload = true; }else{ $msg = &amp;#34;只允许上传.jpg|.png|.gif类型文件！&amp;#34;; unlink($upload_file); } }else{ $msg = &amp;#39;上传出错！&amp;#39;; } } ​&#x9;思路和前面的一样，获取文件信息，移动文件到upload文件夹，第12行使用了白名单验证，多了第14行的rename函数，看名称就是重命名的函数，所以我们可以在重命名之前访问我们上传的文件，所以这题用到了上传竞争，使用python脚本不断的向服务器上传文件，然后访问上传的文件，上传的文件中有一句代码&amp;lt;?php fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&amp;lt;?php phpinfo();?&amp;gt;&#39;);?&amp;gt;这段代码执行以后，会创建一个名为shell.php里面有一句&amp;lt;?php phpinfo();?&amp;gt;的文件。&#xA;​&#x9;脚本代码&#xA;#coding=utf-8 import requests from multiprocessing import Pool def CompeteUpload(list): url=&amp;#34;http://upload-labs/Pass-18/index.</description>
    </item>
    <item>
      <title>Upload-Labs之Pass-16</title>
      <link>/posts/ctf/upload-labs4/</link>
      <pubDate>Mon, 16 Nov 2020 22:50:25 +0000</pubDate>
      <guid>/posts/ctf/upload-labs4/</guid>
      <description>前言 ​&#x9;我在这道题上花了快一天的时间，但是也学到了不少姿势，觉得东西应该足够多，而且参考了的博客发现这道题算是有歧义的，不知道作者想要考察的点是哪一个，所以算是有两种解法吧，可惜的是两种方法都不算是大成功，只有部分成功执行了。&#xA;​&#x9;参考博客：upload-labs之pass 16详细分析&#xA;Pass-16 ​&#x9;源码（三种图片的判定，只贴一个吧，篇幅小一点）：&#xA;$is_upload = false; $msg = null; if (isset($_POST[&amp;#39;submit&amp;#39;])){ // 获得上传文件的基本信息，文件名，类型，大小，临时文件路径 $filename = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;]; $filetype = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;type&amp;#39;]; $tmpname = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;]; $target_path=UPLOAD_PATH.&amp;#39;/&amp;#39;.basename($filename); // 获得上传文件的扩展名 $fileext= substr(strrchr($filename,&amp;#34;.&amp;#34;),1); //判断文件后缀与类型，合法才进行上传操作 if(($fileext == &amp;#34;jpg&amp;#34;) &amp;amp;&amp;amp; ($filetype==&amp;#34;image/jpeg&amp;#34;)){ if(move_uploaded_file($tmpname,$target_path)){ //使用上传的图片生成新的图片 $im = imagecreatefromjpeg($target_path); if($im == false){ $msg = &amp;#34;该文件不是jpg格式的图片！&amp;#34;; @unlink($target_path); }else{ //给新图片指定文件名 srand(time()); $newfilename = strval(rand()).&amp;#34;.jpg&amp;#34;; //显示二次渲染后的图片（使用用户上传图片生成的新图片） $img_path = UPLOAD_PATH.&amp;#39;/&amp;#39;.$newfilename; imagejpeg($im,$img_path); @unlink($target_path); $is_upload = true; } } else { $msg = &amp;#34;上传出错！&amp;#34;; } }else if(($fileext == &amp;#34;png&amp;#34;) &amp;amp;&amp;amp; ($filetype==&amp;#34;image/png&amp;#34;)){ .</description>
    </item>
    <item>
      <title>Upload-Labs(三)</title>
      <link>/posts/ctf/upload-labs3/</link>
      <pubDate>Mon, 16 Nov 2020 16:04:30 +0000</pubDate>
      <guid>/posts/ctf/upload-labs3/</guid>
      <description>前言 ​&#x9;继续接着上一次的Upload-labs往下写。这记下第11-15题，目前进度是20题都已经完成正在抽时间写博客，然后16题是我卡的最久的关，不过也学到了感觉很牛的姿势，所以到时候专门开一篇只讲16。&#xA;​&#x9;在线靶机地址：&#xA;linux环境 windows环境 Pass-11 ​&#x9;(这题使用了windows环境)&#xA;​&#x9;源码：&#xA;$is_upload = false; $msg = null; if(isset($_POST[&amp;#39;submit&amp;#39;])){ $ext_arr = array(&amp;#39;jpg&amp;#39;,&amp;#39;png&amp;#39;,&amp;#39;gif&amp;#39;); $file_ext = substr($_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;],strrpos($_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;],&amp;#34;.&amp;#34;)+1); if(in_array($file_ext,$ext_arr)){ $temp_file = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;]; $img_path = $_GET[&amp;#39;save_path&amp;#39;].&amp;#34;/&amp;#34;.rand(10, 99).date(&amp;#34;YmdHis&amp;#34;).&amp;#34;.&amp;#34;.$file_ext; if(move_uploaded_file($temp_file,$img_path)){ $is_upload = true; } else { $msg = &amp;#39;上传出错！&amp;#39;; } } else{ $msg = &amp;#34;只允许上传.jpg|.png|.gif类型文件！&amp;#34;; } } ​&#x9;分析代码发现是一个白名单验证，但是和之前不同点在于路径中使用了$_GET[&#39;save_path&#39;]，本题提示也写道&#xA;本pass上传路径可控！，就是通过这个GET变量控制上传路径。&#xA;​&#x9;这一关的突破方法需要有一些条件：php版本需要低于5.3.29（我使用的是php版本5.3.17的本地靶机），另一个条件是magic_quotes_gpc需要为关闭状态。magic_quotes_gpc的作用官方文档写道：&#xA;Warning 本特性已自 PHP 5.3.0 起废弃并将自 PHP 5.4.0 起移除。&#xA;​ 为 GPC (Get/Post/Cookie) 操作设置 magic_quotes 状态。 当 magic_quotes 为 on，所有的 &amp;rsquo; (单引号)、&amp;quot; (双引号)、\（反斜杠）和 NUL&amp;rsquo;s 被一个反斜杠自动转义。</description>
    </item>
    <item>
      <title>Upload-Labs(二)</title>
      <link>/posts/ctf/upload-labs2/</link>
      <pubDate>Mon, 09 Nov 2020 20:12:27 +0000</pubDate>
      <guid>/posts/ctf/upload-labs2/</guid>
      <description>前言 ​&#x9;这次彻底的从头到尾分析了一下源码的执行过程，大致的写一下，以防以后再看的时候不知道题目是什么情况。&#xA;$is_upload = false;&#xD;$msg = null;&#xD;if (isset($_POST[&amp;#39;submit&amp;#39;])) {&#xD;if (file_exists(UPLOAD_PATH)) {&#xD;//这里下面是过滤&#xD;$deny_ext = array(&amp;#34;.php&amp;#34;,&amp;#34;.php5&amp;#34;,&amp;#34;.php4&amp;#34;,&amp;#34;.html&amp;#34;, ......);&#xD;$file_name = trim($_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;name&amp;#39;]);&#xD;$file_name = deldot($file_name);//删除文件名末尾的点&#xD;$file_ext = strrchr($file_name, &amp;#39;.&amp;#39;);&#xD;$file_ext = strtolower($file_ext); //转换为小写&#xD;$file_ext = str_ireplace(&amp;#39;::$DATA&amp;#39;, &amp;#39;&amp;#39;, $file_ext);//去除字符串::$DATA&#xD;$file_ext = trim($file_ext); //首尾去空&#xD;//这里下面是移动文件。&#xD;if (!in_array($file_ext, $deny_ext)) {&#xD;$temp_file = $_FILES[&amp;#39;upload_file&amp;#39;][&amp;#39;tmp_name&amp;#39;];&#xD;$img_path = UPLOAD_PATH.&amp;#39;/&amp;#39;.$file_name;&#xD;if (move_uploaded_file($temp_file, $img_path)) {&#xD;$is_upload = true;&#xD;} else {&#xD;$msg = &amp;#39;上传出错！&amp;#39;;&#xD;}&#xD;} else {&#xD;$msg = &amp;#39;此文件类型不允许上传！&amp;#39;;&#xD;}&#xD;} else {&#xD;$msg = UPLOAD_PATH .</description>
    </item>
    <item>
      <title>Upload-Labs(一)</title>
      <link>/posts/ctf/upload-labs1/</link>
      <pubDate>Sun, 08 Nov 2020 19:23:16 +0000</pubDate>
      <guid>/posts/ctf/upload-labs1/</guid>
      <description>介绍 大部分的网站和应用系统都有上传功能，而程序员在开发任意文件上传功能时，并未考虑文件格式后缀的合法性校验或者是否只在前端通过js进行后缀检验。这时攻击者可以上传一个与网站脚本语言相对应的恶意代码动态脚本，例如(jsp、asp、php、aspx文件后缀)到服务器上，从而访问这些恶意脚本中包含的恶意代码，进行动态解析最终达到执行恶意代码的效果，进一步影响服务器安全。&#xA;在线靶机地址：&#xA;linux环境 windows环境 Pass-01 ​&#x9;尝试上传php木马，发现提示上传错误&#xA;​&#x9;提示只能上传jpg、png、gif类型的图片。查看源码发现是一个前端的后缀过滤，那么我们尝试绕过前端的JS代码。&#xA;​&#x9;源码：&#xA;function checkFile() { var file = document.getElementsByName(&amp;#39;upload_file&amp;#39;)[0].value; if (file == null || file == &amp;#34;&amp;#34;) { alert(&amp;#34;请选择要上传的文件!&amp;#34;); return false; } //定义允许上传的文件类型 var allow_ext = &amp;#34;.jpg|.png|.gif&amp;#34;; //提取上传文件的类型 var ext_name = file.substring(file.lastIndexOf(&amp;#34;.&amp;#34;)); //判断上传文件类型是否允许上传 if (allow_ext.indexOf(ext_name + &amp;#34;|&amp;#34;) == -1) { var errMsg = &amp;#34;该文件不允许上传，请上传&amp;#34; + allow_ext + &amp;#34;类型的文件,当前文件类型为：&amp;#34; + ext_name; alert(errMsg); return false; } } ​&#x9;把文件后缀名改成jpg格式上传，使用burp suit抓包。把.jpg后缀重新改为.php即可实现绕过前端JS代码。&#xA;​&#x9;然后右键打开图片，代码成功执行。完工</description>
    </item>
  </channel>
</rss>
